name: integration test

on:
  push:
    branches:
      - "main"
      - "release/*"
    paths:
      - "frontend/appflowy_flutter/**"

  pull_request:
    branches:
      - "main"
      - "release/*"
    paths:
      - "frontend/appflowy_flutter/**"

env:
  CARGO_TERM_COLOR: always

jobs:
  run-integration-tests:
    strategy:
      matrix:
        os: [ubuntu-latest]
        max-runs: [1]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # custom composite github action to build the test lib
      - uses: ./.github/actions/build_test_lib

      - name: Run AppFlowy tests
        id: test-appflowy
        working-directory: ./frontend/appflowy_flutter
        run: |
          chmod +x ../../.github/scripts/run_integration_test.sh
          if ../../.github/scripts/run_integration_test.sh; then
            echo "::set-output name=result::success"
          else
            echo "::set-output name=result::failure"
            exit 1
          fi
        shell: bash

      # - uses: codecov/codecov-action@v3
      #   with:
      #     name: appflowy
      #     flags: appflowy
      #     env_vars: ${{ matrix.os }}
      #     fail_ci_if_error: true
      #     verbose: true

  rerun-integration-tests:
    needs: run-integration-tests
    if: ${{ needs.run-integration-tests.result != 'success' }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        max-runs: [2, 3]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Rerun failed tests
        id: rerun-on-failure
        working-directory: ./frontend/appflowy_flutter
        run: |
          chmod +x ../../.github/scripts/run_integration_test.sh
          if ../../.github/scripts/run_integration_test.sh; then
            echo "::set-output name=result::success"
          else
            echo "::set-output name=result::failure"
            exit 1
          fi

  final-check:
    needs: [run-integration-tests, rerun-integration-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check Test Result
        run: |
          test_results=$(echo "${{ needs.run-integration-tests.result }}")
          rerun_results=$(echo "${{ needs.rerun-integration-tests.*.result }}")
          all_results="$test_results $rerun_results"
          if [[ "$all_results" =~ "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  # check-test-result:
  #   needs: [run-tests, rerun-tests]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Check test result
  #       id: check-result
  #       run: |
  #         test_results=(${{ needs.run-tests.outputs.result }})
  #         for run in ${{ needs.rerun-tests.*.outputs.result }}; do
  #           test_results+=($run)
  #         done

  #         has_failure=false
  #         for result in "${test_results[@]}"; do
  #           if [[ $result != 0 ]]; then
  #             has_failure=true
  #             break
  #           fi
  #         done

  #         if [[ $has_failure == true ]]; then
  #           echo "::set-output name=test-result::failure"
  #         else
  #           echo "::set-output name=test-result::success"
  #         fi

  # final-check:
  #   needs: check-test-result
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Check test result
  #       run: |
  #         test_result=$(echo "${{ needs.check-result.outputs }}")
  #         if [[ $test_result == "failure" ]]; then
  #           exit 1
  #         else
  #           exit 0
  #         fi
