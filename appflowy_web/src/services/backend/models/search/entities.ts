/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ResultIconTypePB {
    Emoji = 0,
    Url = 1,
    Icon = 2
}
export enum IndexTypePB {
    View = 0,
    DocumentBlock = 1,
    DatabaseRow = 2
}
export enum SearchNotification {
    Unknown = 0,
    DidUpdateResults = 1,
    DidCloseResults = 2
}
export class SearchQueryPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        search?: string;
    } & (({
        limit?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("search" in data && data.search != undefined) {
                this.search = data.search;
            }
            if ("limit" in data && data.limit != undefined) {
                this.limit = data.limit;
            }
        }
    }
    get search() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set search(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get limit() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set limit(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_limit() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_limit() {
        const cases: {
            [index: number]: "none" | "limit";
        } = {
            0: "none",
            2: "limit"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        search?: string;
        limit?: number;
    }): SearchQueryPB {
        const message = new SearchQueryPB({});
        if (data.search != null) {
            message.search = data.search;
        }
        if (data.limit != null) {
            message.limit = data.limit;
        }
        return message;
    }
    toObject() {
        const data: {
            search?: string;
            limit?: number;
        } = {};
        if (this.search != null) {
            data.search = this.search;
        }
        if (this.limit != null) {
            data.limit = this.limit;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.search.length)
            writer.writeString(1, this.search);
        if (this.has_limit)
            writer.writeInt64(2, this.limit);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchQueryPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchQueryPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.search = reader.readString();
                    break;
                case 2:
                    message.limit = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchQueryPB {
        return SearchQueryPB.deserialize(bytes);
    }
}
export class RepeatedSearchResultPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: SearchResultPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, SearchResultPB, 1) as SearchResultPB[];
    }
    set items(value: SearchResultPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof SearchResultPB.prototype.toObject>[];
    }): RepeatedSearchResultPB {
        const message = new RepeatedSearchResultPB({});
        if (data.items != null) {
            message.items = data.items.map(item => SearchResultPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof SearchResultPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: SearchResultPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: SearchResultPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedSearchResultPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedSearchResultPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SearchResultPB.deserialize(reader), SearchResultPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedSearchResultPB {
        return RepeatedSearchResultPB.deserialize(bytes);
    }
}
export class SearchResultPB extends pb_1.Message {
    #one_of_decls: number[][] = [[5]];
    constructor(data?: any[] | ({
        index_type?: IndexTypePB;
        view_id?: string;
        id?: string;
        data?: string;
        score?: number;
    } & (({
        icon?: ResultIconPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("index_type" in data && data.index_type != undefined) {
                this.index_type = data.index_type;
            }
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
        }
    }
    get index_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, IndexTypePB.View) as IndexTypePB;
    }
    set index_type(value: IndexTypePB) {
        pb_1.Message.setField(this, 1, value);
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get icon() {
        return pb_1.Message.getWrapperField(this, ResultIconPB, 5) as ResultIconPB;
    }
    set icon(value: ResultIconPB) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_icon() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get one_of_icon() {
        const cases: {
            [index: number]: "none" | "icon";
        } = {
            0: "none",
            5: "icon"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        index_type?: IndexTypePB;
        view_id?: string;
        id?: string;
        data?: string;
        icon?: ReturnType<typeof ResultIconPB.prototype.toObject>;
        score?: number;
    }): SearchResultPB {
        const message = new SearchResultPB({});
        if (data.index_type != null) {
            message.index_type = data.index_type;
        }
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.icon != null) {
            message.icon = ResultIconPB.fromObject(data.icon);
        }
        if (data.score != null) {
            message.score = data.score;
        }
        return message;
    }
    toObject() {
        const data: {
            index_type?: IndexTypePB;
            view_id?: string;
            id?: string;
            data?: string;
            icon?: ReturnType<typeof ResultIconPB.prototype.toObject>;
            score?: number;
        } = {};
        if (this.index_type != null) {
            data.index_type = this.index_type;
        }
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.icon != null) {
            data.icon = this.icon.toObject();
        }
        if (this.score != null) {
            data.score = this.score;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.index_type != IndexTypePB.View)
            writer.writeEnum(1, this.index_type);
        if (this.view_id.length)
            writer.writeString(2, this.view_id);
        if (this.id.length)
            writer.writeString(3, this.id);
        if (this.data.length)
            writer.writeString(4, this.data);
        if (this.has_icon)
            writer.writeMessage(5, this.icon, () => this.icon.serialize(writer));
        if (this.score != 0)
            writer.writeDouble(6, this.score);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchResultPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchResultPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.index_type = reader.readEnum();
                    break;
                case 2:
                    message.view_id = reader.readString();
                    break;
                case 3:
                    message.id = reader.readString();
                    break;
                case 4:
                    message.data = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.icon, () => message.icon = ResultIconPB.deserialize(reader));
                    break;
                case 6:
                    message.score = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchResultPB {
        return SearchResultPB.deserialize(bytes);
    }
}
export class ResultIconPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ty?: ResultIconTypePB;
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 1, ResultIconTypePB.Emoji) as ResultIconTypePB;
    }
    set ty(value: ResultIconTypePB) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        ty?: ResultIconTypePB;
        value?: string;
    }): ResultIconPB {
        const message = new ResultIconPB({});
        if (data.ty != null) {
            message.ty = data.ty;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            ty?: ResultIconTypePB;
            value?: string;
        } = {};
        if (this.ty != null) {
            data.ty = this.ty;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ty != ResultIconTypePB.Emoji)
            writer.writeEnum(1, this.ty);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResultIconPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResultIconPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ty = reader.readEnum();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResultIconPB {
        return ResultIconPB.deserialize(bytes);
    }
}
export class SearchResultNotificationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: SearchResultPB[];
        closed?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("closed" in data && data.closed != undefined) {
                this.closed = data.closed;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, SearchResultPB, 1) as SearchResultPB[];
    }
    set items(value: SearchResultPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get closed() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set closed(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof SearchResultPB.prototype.toObject>[];
        closed?: boolean;
    }): SearchResultNotificationPB {
        const message = new SearchResultNotificationPB({});
        if (data.items != null) {
            message.items = data.items.map(item => SearchResultPB.fromObject(item));
        }
        if (data.closed != null) {
            message.closed = data.closed;
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof SearchResultPB.prototype.toObject>[];
            closed?: boolean;
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: SearchResultPB) => item.toObject());
        }
        if (this.closed != null) {
            data.closed = this.closed;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: SearchResultPB) => item.serialize(writer));
        if (this.closed != false)
            writer.writeBool(2, this.closed);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchResultNotificationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchResultNotificationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SearchResultPB.deserialize(reader), SearchResultPB));
                    break;
                case 2:
                    message.closed = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchResultNotificationPB {
        return SearchResultNotificationPB.deserialize(bytes);
    }
}
