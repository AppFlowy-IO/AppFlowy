import 'package:appflowy_ui/appflowy_ui.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../logic/share_with_user_bloc.dart';
import '../../../share/data/models/shared_user.dart';
import '../../../share/data/models/share_role.dart';

/// Widget to display a single shared user row as per the UI design, using AFMenuItem.
class SharedUserWidget extends StatelessWidget {
  final SharedUser user;
  final bool isCurrentUser;
  final VoidCallback? onEdit;

  const SharedUserWidget({
    Key? key,
    required this.user,
    this.isCurrentUser = false,
    this.onEdit,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = AppFlowyTheme.of(context);
    final roleLabel = _roleLabel(user.role, isCurrentUser);
    final roleColor = _roleColor(user.role, theme);
    final name = user.name;
    final email = user.email;
    final subtitle = isCurrentUser ? '$email  (You)' : email;

    return AFMenuItem(
      leading: AFAvatar(
        name: name,
        url: user.avatarUrl,
        size: AFAvatarSize.l,
      ),
      title: name,
      subtitle: subtitle,
      trailing: isCurrentUser
          ? Text(
              'Full access',
              style: theme.textStyle.body.standard(color: theme.textColorScheme.primary),
            )
          : AFGhostTextButton.primary(
              text: 'Edit',
              onTap: onEdit ?? () {},
              size: AFButtonSize.s,
            ),
      onTap: isCurrentUser ? () {} : onEdit ?? () {},
    );
  }

  String _roleLabel(ShareRole role, bool isCurrentUser) {
    if (isCurrentUser) return '';
    switch (role) {
      case ShareRole.readOnly:
        return 'Guest';
      case ShareRole.readAndComment:
        return 'Commenter';
      case ShareRole.readAndWrite:
        return 'Editor';
      case ShareRole.fullAccess:
        return 'Admin';
    }
  }

  Color _roleColor(ShareRole role, AppFlowyThemeData theme) {
    switch (role) {
      case ShareRole.readOnly:
        return theme.textColorScheme.warning;
      case ShareRole.readAndComment:
        return theme.textColorScheme.info;
      case ShareRole.readAndWrite:
        return theme.textColorScheme.success;
      case ShareRole.fullAccess:
        return theme.textColorScheme.primary;
    }
  }
}

/// Example usage in a list with BlocBuilder
class SharedUserList extends StatelessWidget {
  const SharedUserList({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ShareWithUserBloc, ShareWithUserState>(
      builder: (context, state) {
        if (state.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }
        if (state.errorMessage.isNotEmpty) {
          return Center(child: Text(state.errorMessage));
        }
        final users = state.users;
        // Assume current user is the first in the list for demo; adjust as needed
        final currentUserEmail = users.isNotEmpty ? users.first.email : '';
        return ListView.separated(
          shrinkWrap: true,
          itemCount: users.length,
          separatorBuilder: (_, __) => AFDivider(),
          itemBuilder: (context, index) {
            final user = users[index];
            final isCurrentUser = user.email == currentUserEmail;
            return SharedUserWidget(
              user: user,
              isCurrentUser: isCurrentUser,
              onEdit: isCurrentUser ? null : () {
                // Show edit dialog or menu
                // context.read<ShareWithUserBloc>().add(...)
              },
            );
          },
        );
      },
    );
  }
}