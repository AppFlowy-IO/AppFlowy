// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'folder/folder.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateCoreCoreInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1519719864;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_appflowy',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<FolderResponse> crateFolderFolderFolderManagerGetFolderList(
      {required FolderManager that});

  FolderManager crateFolderFolderFolderManagerNew(
      {required String baseUrl, required String workspaceId});

  String crateFolderFolderGreet({required String name});

  Future<void> crateCoreCoreInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<FolderResponse> crateFolderFolderFolderManagerGetFolderList(
      {required FolderManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_folder_manager(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_folder_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFolderFolderFolderManagerGetFolderListConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFolderFolderFolderManagerGetFolderListConstMeta =>
      const TaskConstMeta(
        debugName: "folder_manager_get_folder_list",
        argNames: ["that"],
      );

  @override
  FolderManager crateFolderFolderFolderManagerNew(
      {required String baseUrl, required String workspaceId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(baseUrl, serializer);
        sse_encode_String(workspaceId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_folder_manager,
        decodeErrorData: null,
      ),
      constMeta: kCrateFolderFolderFolderManagerNewConstMeta,
      argValues: [baseUrl, workspaceId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFolderFolderFolderManagerNewConstMeta =>
      const TaskConstMeta(
        debugName: "folder_manager_new",
        argNames: ["baseUrl", "workspaceId"],
      );

  @override
  String crateFolderFolderGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateFolderFolderGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFolderFolderGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateCoreCoreInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateCoreCoreInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCoreCoreInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FolderExtra dco_decode_box_autoadd_folder_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_folder_extra(raw);
  }

  @protected
  FolderManager dco_decode_box_autoadd_folder_manager(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_folder_manager(raw);
  }

  @protected
  FolderExtra dco_decode_folder_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FolderExtra(
      isSpace: dco_decode_bool(arr[0]),
      spaceCreatedAt: dco_decode_i_64(arr[1]),
      spaceIcon: dco_decode_String(arr[2]),
      spaceIconColor: dco_decode_String(arr[3]),
      spacePermission: dco_decode_i_32(arr[4]),
    );
  }

  @protected
  FolderItem dco_decode_folder_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return FolderItem(
      viewId: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      icon: dco_decode_opt_String(arr[2]),
      isSpace: dco_decode_bool(arr[3]),
      isPrivate: dco_decode_bool(arr[4]),
      isPublished: dco_decode_bool(arr[5]),
      layout: dco_decode_i_32(arr[6]),
      createdAt: dco_decode_String(arr[7]),
      lastEditedTime: dco_decode_String(arr[8]),
      isLocked: dco_decode_opt_box_autoadd_bool(arr[9]),
      extra: dco_decode_opt_box_autoadd_folder_extra(arr[10]),
      children: dco_decode_list_folder_item(arr[11]),
    );
  }

  @protected
  FolderManager dco_decode_folder_manager(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FolderManager.raw(
      baseUrl: dco_decode_String(arr[0]),
      workspaceId: dco_decode_String(arr[1]),
    );
  }

  @protected
  FolderResponse dco_decode_folder_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FolderResponse(
      data: dco_decode_root_folder(arr[0]),
      code: dco_decode_i_32(arr[1]),
      message: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<FolderItem> dco_decode_list_folder_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_folder_item).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  FolderExtra? dco_decode_opt_box_autoadd_folder_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_folder_extra(raw);
  }

  @protected
  RootFolder dco_decode_root_folder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return RootFolder(
      viewId: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      icon: dco_decode_opt_String(arr[2]),
      isSpace: dco_decode_bool(arr[3]),
      isPrivate: dco_decode_bool(arr[4]),
      isPublished: dco_decode_bool(arr[5]),
      layout: dco_decode_i_32(arr[6]),
      createdAt: dco_decode_String(arr[7]),
      lastEditedTime: dco_decode_String(arr[8]),
      isLocked: dco_decode_opt_box_autoadd_bool(arr[9]),
      extra: dco_decode_opt_box_autoadd_folder_extra(arr[10]),
      children: dco_decode_list_folder_item(arr[11]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  FolderExtra sse_decode_box_autoadd_folder_extra(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_folder_extra(deserializer));
  }

  @protected
  FolderManager sse_decode_box_autoadd_folder_manager(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_folder_manager(deserializer));
  }

  @protected
  FolderExtra sse_decode_folder_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isSpace = sse_decode_bool(deserializer);
    var var_spaceCreatedAt = sse_decode_i_64(deserializer);
    var var_spaceIcon = sse_decode_String(deserializer);
    var var_spaceIconColor = sse_decode_String(deserializer);
    var var_spacePermission = sse_decode_i_32(deserializer);
    return FolderExtra(
        isSpace: var_isSpace,
        spaceCreatedAt: var_spaceCreatedAt,
        spaceIcon: var_spaceIcon,
        spaceIconColor: var_spaceIconColor,
        spacePermission: var_spacePermission);
  }

  @protected
  FolderItem sse_decode_folder_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_viewId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    var var_isSpace = sse_decode_bool(deserializer);
    var var_isPrivate = sse_decode_bool(deserializer);
    var var_isPublished = sse_decode_bool(deserializer);
    var var_layout = sse_decode_i_32(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_lastEditedTime = sse_decode_String(deserializer);
    var var_isLocked = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_extra = sse_decode_opt_box_autoadd_folder_extra(deserializer);
    var var_children = sse_decode_list_folder_item(deserializer);
    return FolderItem(
        viewId: var_viewId,
        name: var_name,
        icon: var_icon,
        isSpace: var_isSpace,
        isPrivate: var_isPrivate,
        isPublished: var_isPublished,
        layout: var_layout,
        createdAt: var_createdAt,
        lastEditedTime: var_lastEditedTime,
        isLocked: var_isLocked,
        extra: var_extra,
        children: var_children);
  }

  @protected
  FolderManager sse_decode_folder_manager(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baseUrl = sse_decode_String(deserializer);
    var var_workspaceId = sse_decode_String(deserializer);
    return FolderManager.raw(
        baseUrl: var_baseUrl, workspaceId: var_workspaceId);
  }

  @protected
  FolderResponse sse_decode_folder_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_root_folder(deserializer);
    var var_code = sse_decode_i_32(deserializer);
    var var_message = sse_decode_String(deserializer);
    return FolderResponse(data: var_data, code: var_code, message: var_message);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<FolderItem> sse_decode_list_folder_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FolderItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_folder_item(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FolderExtra? sse_decode_opt_box_autoadd_folder_extra(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_folder_extra(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RootFolder sse_decode_root_folder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_viewId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    var var_isSpace = sse_decode_bool(deserializer);
    var var_isPrivate = sse_decode_bool(deserializer);
    var var_isPublished = sse_decode_bool(deserializer);
    var var_layout = sse_decode_i_32(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_lastEditedTime = sse_decode_String(deserializer);
    var var_isLocked = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_extra = sse_decode_opt_box_autoadd_folder_extra(deserializer);
    var var_children = sse_decode_list_folder_item(deserializer);
    return RootFolder(
        viewId: var_viewId,
        name: var_name,
        icon: var_icon,
        isSpace: var_isSpace,
        isPrivate: var_isPrivate,
        isPublished: var_isPublished,
        layout: var_layout,
        createdAt: var_createdAt,
        lastEditedTime: var_lastEditedTime,
        isLocked: var_isLocked,
        extra: var_extra,
        children: var_children);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_folder_extra(
      FolderExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_folder_extra(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_folder_manager(
      FolderManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_folder_manager(self, serializer);
  }

  @protected
  void sse_encode_folder_extra(FolderExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isSpace, serializer);
    sse_encode_i_64(self.spaceCreatedAt, serializer);
    sse_encode_String(self.spaceIcon, serializer);
    sse_encode_String(self.spaceIconColor, serializer);
    sse_encode_i_32(self.spacePermission, serializer);
  }

  @protected
  void sse_encode_folder_item(FolderItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.viewId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.icon, serializer);
    sse_encode_bool(self.isSpace, serializer);
    sse_encode_bool(self.isPrivate, serializer);
    sse_encode_bool(self.isPublished, serializer);
    sse_encode_i_32(self.layout, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.lastEditedTime, serializer);
    sse_encode_opt_box_autoadd_bool(self.isLocked, serializer);
    sse_encode_opt_box_autoadd_folder_extra(self.extra, serializer);
    sse_encode_list_folder_item(self.children, serializer);
  }

  @protected
  void sse_encode_folder_manager(FolderManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.baseUrl, serializer);
    sse_encode_String(self.workspaceId, serializer);
  }

  @protected
  void sse_encode_folder_response(
      FolderResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_root_folder(self.data, serializer);
    sse_encode_i_32(self.code, serializer);
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_folder_item(
      List<FolderItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_folder_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_folder_extra(
      FolderExtra? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_folder_extra(self, serializer);
    }
  }

  @protected
  void sse_encode_root_folder(RootFolder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.viewId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.icon, serializer);
    sse_encode_bool(self.isSpace, serializer);
    sse_encode_bool(self.isPrivate, serializer);
    sse_encode_bool(self.isPublished, serializer);
    sse_encode_i_32(self.layout, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.lastEditedTime, serializer);
    sse_encode_opt_box_autoadd_bool(self.isLocked, serializer);
    sse_encode_opt_box_autoadd_folder_extra(self.extra, serializer);
    sse_encode_list_folder_item(self.children, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
