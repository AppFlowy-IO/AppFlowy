// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1519719864;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__folder__folder__folder_manager_get_folder_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "folder_manager_get_folder_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::folder::folder::FolderManager>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::folder::folder::FolderManager::get_folder_list(&api_that)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__folder__folder__folder_manager_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "folder_manager_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_base_url = <String>::sse_decode(&mut deserializer);
            let api_workspace_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::folder::folder::FolderManager::new(
                    api_base_url,
                    api_workspace_id,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__folder__folder__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::folder::folder::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__core__core__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::core::core::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::folder::folder::FolderExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_isSpace = <bool>::sse_decode(deserializer);
        let mut var_spaceCreatedAt = <i64>::sse_decode(deserializer);
        let mut var_spaceIcon = <String>::sse_decode(deserializer);
        let mut var_spaceIconColor = <String>::sse_decode(deserializer);
        let mut var_spacePermission = <i32>::sse_decode(deserializer);
        return crate::folder::folder::FolderExtra {
            is_space: var_isSpace,
            space_created_at: var_spaceCreatedAt,
            space_icon: var_spaceIcon,
            space_icon_color: var_spaceIconColor,
            space_permission: var_spacePermission,
        };
    }
}

impl SseDecode for crate::folder::folder::FolderItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_viewId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_icon = <Option<String>>::sse_decode(deserializer);
        let mut var_isSpace = <bool>::sse_decode(deserializer);
        let mut var_isPrivate = <bool>::sse_decode(deserializer);
        let mut var_isPublished = <bool>::sse_decode(deserializer);
        let mut var_layout = <i32>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_lastEditedTime = <String>::sse_decode(deserializer);
        let mut var_isLocked = <Option<bool>>::sse_decode(deserializer);
        let mut var_extra = <Option<crate::folder::folder::FolderExtra>>::sse_decode(deserializer);
        let mut var_children = <Vec<crate::folder::folder::FolderItem>>::sse_decode(deserializer);
        return crate::folder::folder::FolderItem {
            view_id: var_viewId,
            name: var_name,
            icon: var_icon,
            is_space: var_isSpace,
            is_private: var_isPrivate,
            is_published: var_isPublished,
            layout: var_layout,
            created_at: var_createdAt,
            last_edited_time: var_lastEditedTime,
            is_locked: var_isLocked,
            extra: var_extra,
            children: var_children,
        };
    }
}

impl SseDecode for crate::folder::folder::FolderManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_baseUrl = <String>::sse_decode(deserializer);
        let mut var_workspaceId = <String>::sse_decode(deserializer);
        return crate::folder::folder::FolderManager {
            base_url: var_baseUrl,
            workspace_id: var_workspaceId,
        };
    }
}

impl SseDecode for crate::folder::folder::FolderResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::folder::folder::RootFolder>::sse_decode(deserializer);
        let mut var_code = <i32>::sse_decode(deserializer);
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::folder::folder::FolderResponse {
            data: var_data,
            code: var_code,
            message: var_message,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::folder::folder::FolderItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::folder::folder::FolderItem>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::folder::folder::FolderExtra> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::folder::folder::FolderExtra>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::folder::folder::RootFolder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_viewId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_icon = <Option<String>>::sse_decode(deserializer);
        let mut var_isSpace = <bool>::sse_decode(deserializer);
        let mut var_isPrivate = <bool>::sse_decode(deserializer);
        let mut var_isPublished = <bool>::sse_decode(deserializer);
        let mut var_layout = <i32>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_lastEditedTime = <String>::sse_decode(deserializer);
        let mut var_isLocked = <Option<bool>>::sse_decode(deserializer);
        let mut var_extra = <Option<crate::folder::folder::FolderExtra>>::sse_decode(deserializer);
        let mut var_children = <Vec<crate::folder::folder::FolderItem>>::sse_decode(deserializer);
        return crate::folder::folder::RootFolder {
            view_id: var_viewId,
            name: var_name,
            icon: var_icon,
            is_space: var_isSpace,
            is_private: var_isPrivate,
            is_published: var_isPublished,
            layout: var_layout,
            created_at: var_createdAt,
            last_edited_time: var_lastEditedTime,
            is_locked: var_isLocked,
            extra: var_extra,
            children: var_children,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__folder__folder__folder_manager_get_folder_list_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__core__core__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        2 => wire__crate__folder__folder__folder_manager_new_impl(ptr, rust_vec_len, data_len),
        3 => wire__crate__folder__folder__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::folder::folder::FolderExtra {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.is_space.into_into_dart().into_dart(),
            self.space_created_at.into_into_dart().into_dart(),
            self.space_icon.into_into_dart().into_dart(),
            self.space_icon_color.into_into_dart().into_dart(),
            self.space_permission.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::folder::folder::FolderExtra
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::folder::folder::FolderExtra>
    for crate::folder::folder::FolderExtra
{
    fn into_into_dart(self) -> crate::folder::folder::FolderExtra {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::folder::folder::FolderItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.view_id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
            self.is_space.into_into_dart().into_dart(),
            self.is_private.into_into_dart().into_dart(),
            self.is_published.into_into_dart().into_dart(),
            self.layout.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.last_edited_time.into_into_dart().into_dart(),
            self.is_locked.into_into_dart().into_dart(),
            self.extra.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::folder::folder::FolderItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::folder::folder::FolderItem>
    for crate::folder::folder::FolderItem
{
    fn into_into_dart(self) -> crate::folder::folder::FolderItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::folder::folder::FolderManager {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.base_url.into_into_dart().into_dart(),
            self.workspace_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::folder::folder::FolderManager
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::folder::folder::FolderManager>
    for crate::folder::folder::FolderManager
{
    fn into_into_dart(self) -> crate::folder::folder::FolderManager {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::folder::folder::FolderResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.code.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::folder::folder::FolderResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::folder::folder::FolderResponse>
    for crate::folder::folder::FolderResponse
{
    fn into_into_dart(self) -> crate::folder::folder::FolderResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::folder::folder::RootFolder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.view_id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
            self.is_space.into_into_dart().into_dart(),
            self.is_private.into_into_dart().into_dart(),
            self.is_published.into_into_dart().into_dart(),
            self.layout.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.last_edited_time.into_into_dart().into_dart(),
            self.is_locked.into_into_dart().into_dart(),
            self.extra.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::folder::folder::RootFolder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::folder::folder::RootFolder>
    for crate::folder::folder::RootFolder
{
    fn into_into_dart(self) -> crate::folder::folder::RootFolder {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::folder::folder::FolderExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_space, serializer);
        <i64>::sse_encode(self.space_created_at, serializer);
        <String>::sse_encode(self.space_icon, serializer);
        <String>::sse_encode(self.space_icon_color, serializer);
        <i32>::sse_encode(self.space_permission, serializer);
    }
}

impl SseEncode for crate::folder::folder::FolderItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.view_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.icon, serializer);
        <bool>::sse_encode(self.is_space, serializer);
        <bool>::sse_encode(self.is_private, serializer);
        <bool>::sse_encode(self.is_published, serializer);
        <i32>::sse_encode(self.layout, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.last_edited_time, serializer);
        <Option<bool>>::sse_encode(self.is_locked, serializer);
        <Option<crate::folder::folder::FolderExtra>>::sse_encode(self.extra, serializer);
        <Vec<crate::folder::folder::FolderItem>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::folder::folder::FolderManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.base_url, serializer);
        <String>::sse_encode(self.workspace_id, serializer);
    }
}

impl SseEncode for crate::folder::folder::FolderResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::folder::folder::RootFolder>::sse_encode(self.data, serializer);
        <i32>::sse_encode(self.code, serializer);
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::folder::folder::FolderItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::folder::folder::FolderItem>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::folder::folder::FolderExtra> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::folder::folder::FolderExtra>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::folder::folder::RootFolder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.view_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.icon, serializer);
        <bool>::sse_encode(self.is_space, serializer);
        <bool>::sse_encode(self.is_private, serializer);
        <bool>::sse_encode(self.is_published, serializer);
        <i32>::sse_encode(self.layout, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.last_edited_time, serializer);
        <Option<bool>>::sse_encode(self.is_locked, serializer);
        <Option<crate::folder::folder::FolderExtra>>::sse_encode(self.extra, serializer);
        <Vec<crate::folder::folder::FolderItem>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
