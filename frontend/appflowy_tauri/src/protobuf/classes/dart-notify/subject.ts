/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: subject.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SubscribeObject extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [5]];
    constructor(data?: any[] | ({
        source?: string;
        ty?: number;
        id?: string;
    } & (({
        payload?: Uint8Array;
    }) | ({
        error?: Uint8Array;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("source" in data && data.source != undefined) {
                this.source = data.source;
            }
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get source() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set source(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ty(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get payload() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set payload(value: Uint8Array) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_payload() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get error() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
    }
    set error(value: Uint8Array) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
    }
    get has_error() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get one_of_payload() {
        const cases: {
            [index: number]: "none" | "payload";
        } = {
            0: "none",
            4: "payload"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_error() {
        const cases: {
            [index: number]: "none" | "error";
        } = {
            0: "none",
            5: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        source?: string;
        ty?: number;
        id?: string;
        payload?: Uint8Array;
        error?: Uint8Array;
    }): SubscribeObject {
        const message = new SubscribeObject({});
        if (data.source != null) {
            message.source = data.source;
        }
        if (data.ty != null) {
            message.ty = data.ty;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.payload != null) {
            message.payload = data.payload;
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            source?: string;
            ty?: number;
            id?: string;
            payload?: Uint8Array;
            error?: Uint8Array;
        } = {};
        if (this.source != null) {
            data.source = this.source;
        }
        if (this.ty != null) {
            data.ty = this.ty;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.payload != null) {
            data.payload = this.payload;
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.source.length)
            writer.writeString(1, this.source);
        if (this.ty != 0)
            writer.writeInt32(2, this.ty);
        if (this.id.length)
            writer.writeString(3, this.id);
        if (this.has_payload)
            writer.writeBytes(4, this.payload);
        if (this.has_error)
            writer.writeBytes(5, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribeObject {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribeObject();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.source = reader.readString();
                    break;
                case 2:
                    message.ty = reader.readInt32();
                    break;
                case 3:
                    message.id = reader.readString();
                    break;
                case 4:
                    message.payload = reader.readBytes();
                    break;
                case 5:
                    message.error = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubscribeObject {
        return SubscribeObject.deserialize(bytes);
    }
}
