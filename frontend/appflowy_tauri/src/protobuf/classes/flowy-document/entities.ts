/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ExportType {
    Text = 0,
    Markdown = 1,
    Link = 2
}
export enum DocumentVersionPB {
    V0 = 0,
    V1 = 1
}
export class EditPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        doc_id?: string;
        operations?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("doc_id" in data && data.doc_id != undefined) {
                this.doc_id = data.doc_id;
            }
            if ("operations" in data && data.operations != undefined) {
                this.operations = data.operations;
            }
        }
    }
    get doc_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set doc_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get operations() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set operations(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        doc_id?: string;
        operations?: string;
    }): EditPayloadPB {
        const message = new EditPayloadPB({});
        if (data.doc_id != null) {
            message.doc_id = data.doc_id;
        }
        if (data.operations != null) {
            message.operations = data.operations;
        }
        return message;
    }
    toObject() {
        const data: {
            doc_id?: string;
            operations?: string;
        } = {};
        if (this.doc_id != null) {
            data.doc_id = this.doc_id;
        }
        if (this.operations != null) {
            data.operations = this.operations;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.doc_id.length)
            writer.writeString(1, this.doc_id);
        if (this.operations.length)
            writer.writeString(2, this.operations);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.doc_id = reader.readString();
                    break;
                case 2:
                    message.operations = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EditPayloadPB {
        return EditPayloadPB.deserialize(bytes);
    }
}
export class DocumentSnapshotPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        doc_id?: string;
        snapshot?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("doc_id" in data && data.doc_id != undefined) {
                this.doc_id = data.doc_id;
            }
            if ("snapshot" in data && data.snapshot != undefined) {
                this.snapshot = data.snapshot;
            }
        }
    }
    get doc_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set doc_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get snapshot() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set snapshot(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        doc_id?: string;
        snapshot?: string;
    }): DocumentSnapshotPB {
        const message = new DocumentSnapshotPB({});
        if (data.doc_id != null) {
            message.doc_id = data.doc_id;
        }
        if (data.snapshot != null) {
            message.snapshot = data.snapshot;
        }
        return message;
    }
    toObject() {
        const data: {
            doc_id?: string;
            snapshot?: string;
        } = {};
        if (this.doc_id != null) {
            data.doc_id = this.doc_id;
        }
        if (this.snapshot != null) {
            data.snapshot = this.snapshot;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.doc_id.length)
            writer.writeString(1, this.doc_id);
        if (this.snapshot.length)
            writer.writeString(2, this.snapshot);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentSnapshotPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentSnapshotPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.doc_id = reader.readString();
                    break;
                case 2:
                    message.snapshot = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DocumentSnapshotPB {
        return DocumentSnapshotPB.deserialize(bytes);
    }
}
export class ExportPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        export_type?: ExportType;
        document_version?: DocumentVersionPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("export_type" in data && data.export_type != undefined) {
                this.export_type = data.export_type;
            }
            if ("document_version" in data && data.document_version != undefined) {
                this.document_version = data.document_version;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get export_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, ExportType.Text) as ExportType;
    }
    set export_type(value: ExportType) {
        pb_1.Message.setField(this, 2, value);
    }
    get document_version() {
        return pb_1.Message.getFieldWithDefault(this, 3, DocumentVersionPB.V0) as DocumentVersionPB;
    }
    set document_version(value: DocumentVersionPB) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        view_id?: string;
        export_type?: ExportType;
        document_version?: DocumentVersionPB;
    }): ExportPayloadPB {
        const message = new ExportPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.export_type != null) {
            message.export_type = data.export_type;
        }
        if (data.document_version != null) {
            message.document_version = data.document_version;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            export_type?: ExportType;
            document_version?: DocumentVersionPB;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.export_type != null) {
            data.export_type = this.export_type;
        }
        if (this.document_version != null) {
            data.document_version = this.document_version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.export_type != ExportType.Text)
            writer.writeEnum(2, this.export_type);
        if (this.document_version != DocumentVersionPB.V0)
            writer.writeEnum(3, this.document_version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.export_type = reader.readEnum();
                    break;
                case 3:
                    message.document_version = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExportPayloadPB {
        return ExportPayloadPB.deserialize(bytes);
    }
}
export class OpenDocumentContextPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        document_id?: string;
        document_version?: DocumentVersionPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("document_id" in data && data.document_id != undefined) {
                this.document_id = data.document_id;
            }
            if ("document_version" in data && data.document_version != undefined) {
                this.document_version = data.document_version;
            }
        }
    }
    get document_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set document_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get document_version() {
        return pb_1.Message.getFieldWithDefault(this, 2, DocumentVersionPB.V0) as DocumentVersionPB;
    }
    set document_version(value: DocumentVersionPB) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        document_id?: string;
        document_version?: DocumentVersionPB;
    }): OpenDocumentContextPB {
        const message = new OpenDocumentContextPB({});
        if (data.document_id != null) {
            message.document_id = data.document_id;
        }
        if (data.document_version != null) {
            message.document_version = data.document_version;
        }
        return message;
    }
    toObject() {
        const data: {
            document_id?: string;
            document_version?: DocumentVersionPB;
        } = {};
        if (this.document_id != null) {
            data.document_id = this.document_id;
        }
        if (this.document_version != null) {
            data.document_version = this.document_version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.document_id.length)
            writer.writeString(1, this.document_id);
        if (this.document_version != DocumentVersionPB.V0)
            writer.writeEnum(2, this.document_version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenDocumentContextPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenDocumentContextPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.document_id = reader.readString();
                    break;
                case 2:
                    message.document_version = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenDocumentContextPB {
        return OpenDocumentContextPB.deserialize(bytes);
    }
}
export class ExportDataPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: string;
        export_type?: ExportType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("export_type" in data && data.export_type != undefined) {
                this.export_type = data.export_type;
            }
        }
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get export_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, ExportType.Text) as ExportType;
    }
    set export_type(value: ExportType) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        data?: string;
        export_type?: ExportType;
    }): ExportDataPB {
        const message = new ExportDataPB({});
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.export_type != null) {
            message.export_type = data.export_type;
        }
        return message;
    }
    toObject() {
        const data: {
            data?: string;
            export_type?: ExportType;
        } = {};
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.export_type != null) {
            data.export_type = this.export_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeString(1, this.data);
        if (this.export_type != ExportType.Text)
            writer.writeEnum(2, this.export_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportDataPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportDataPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.data = reader.readString();
                    break;
                case 2:
                    message.export_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExportDataPB {
        return ExportDataPB.deserialize(bytes);
    }
}
