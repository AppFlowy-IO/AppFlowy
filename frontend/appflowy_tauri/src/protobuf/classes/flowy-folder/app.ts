/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: app.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./view";
import * as pb_1 from "google-protobuf";
export class AppPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        workspace_id?: string;
        name?: string;
        desc?: string;
        belongings?: dependency_1.RepeatedViewPB;
        version?: number;
        modified_time?: number;
        create_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("workspace_id" in data && data.workspace_id != undefined) {
                this.workspace_id = data.workspace_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("belongings" in data && data.belongings != undefined) {
                this.belongings = data.belongings;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("modified_time" in data && data.modified_time != undefined) {
                this.modified_time = data.modified_time;
            }
            if ("create_time" in data && data.create_time != undefined) {
                this.create_time = data.create_time;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get workspace_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set workspace_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get belongings() {
        return pb_1.Message.getWrapperField(this, dependency_1.RepeatedViewPB, 5) as dependency_1.RepeatedViewPB;
    }
    set belongings(value: dependency_1.RepeatedViewPB) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_belongings() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get modified_time() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set modified_time(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get create_time() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set create_time(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        workspace_id?: string;
        name?: string;
        desc?: string;
        belongings?: ReturnType<typeof dependency_1.RepeatedViewPB.prototype.toObject>;
        version?: number;
        modified_time?: number;
        create_time?: number;
    }): AppPB {
        const message = new AppPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.workspace_id != null) {
            message.workspace_id = data.workspace_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.belongings != null) {
            message.belongings = dependency_1.RepeatedViewPB.fromObject(data.belongings);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.modified_time != null) {
            message.modified_time = data.modified_time;
        }
        if (data.create_time != null) {
            message.create_time = data.create_time;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            workspace_id?: string;
            name?: string;
            desc?: string;
            belongings?: ReturnType<typeof dependency_1.RepeatedViewPB.prototype.toObject>;
            version?: number;
            modified_time?: number;
            create_time?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.workspace_id != null) {
            data.workspace_id = this.workspace_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.belongings != null) {
            data.belongings = this.belongings.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.modified_time != null) {
            data.modified_time = this.modified_time;
        }
        if (this.create_time != null) {
            data.create_time = this.create_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.workspace_id.length)
            writer.writeString(2, this.workspace_id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.desc.length)
            writer.writeString(4, this.desc);
        if (this.has_belongings)
            writer.writeMessage(5, this.belongings, () => this.belongings.serialize(writer));
        if (this.version != 0)
            writer.writeInt64(6, this.version);
        if (this.modified_time != 0)
            writer.writeInt64(7, this.modified_time);
        if (this.create_time != 0)
            writer.writeInt64(8, this.create_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.workspace_id = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.desc = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.belongings, () => message.belongings = dependency_1.RepeatedViewPB.deserialize(reader));
                    break;
                case 6:
                    message.version = reader.readInt64();
                    break;
                case 7:
                    message.modified_time = reader.readInt64();
                    break;
                case 8:
                    message.create_time = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AppPB {
        return AppPB.deserialize(bytes);
    }
}
export class RepeatedAppPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: AppPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, AppPB, 1) as AppPB[];
    }
    set items(value: AppPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof AppPB.prototype.toObject>[];
    }): RepeatedAppPB {
        const message = new RepeatedAppPB({});
        if (data.items != null) {
            message.items = data.items.map(item => AppPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof AppPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: AppPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: AppPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedAppPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedAppPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AppPB.deserialize(reader), AppPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedAppPB {
        return RepeatedAppPB.deserialize(bytes);
    }
}
export class CreateAppPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        workspace_id?: string;
        name?: string;
        desc?: string;
        color_style?: ColorStylePB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("workspace_id" in data && data.workspace_id != undefined) {
                this.workspace_id = data.workspace_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("color_style" in data && data.color_style != undefined) {
                this.color_style = data.color_style;
            }
        }
    }
    get workspace_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set workspace_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get color_style() {
        return pb_1.Message.getWrapperField(this, ColorStylePB, 4) as ColorStylePB;
    }
    set color_style(value: ColorStylePB) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_color_style() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        workspace_id?: string;
        name?: string;
        desc?: string;
        color_style?: ReturnType<typeof ColorStylePB.prototype.toObject>;
    }): CreateAppPayloadPB {
        const message = new CreateAppPayloadPB({});
        if (data.workspace_id != null) {
            message.workspace_id = data.workspace_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.color_style != null) {
            message.color_style = ColorStylePB.fromObject(data.color_style);
        }
        return message;
    }
    toObject() {
        const data: {
            workspace_id?: string;
            name?: string;
            desc?: string;
            color_style?: ReturnType<typeof ColorStylePB.prototype.toObject>;
        } = {};
        if (this.workspace_id != null) {
            data.workspace_id = this.workspace_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.color_style != null) {
            data.color_style = this.color_style.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.workspace_id.length)
            writer.writeString(1, this.workspace_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.desc.length)
            writer.writeString(3, this.desc);
        if (this.has_color_style)
            writer.writeMessage(4, this.color_style, () => this.color_style.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAppPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAppPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.workspace_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.color_style, () => message.color_style = ColorStylePB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateAppPayloadPB {
        return CreateAppPayloadPB.deserialize(bytes);
    }
}
export class ColorStylePB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        theme_color?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("theme_color" in data && data.theme_color != undefined) {
                this.theme_color = data.theme_color;
            }
        }
    }
    get theme_color() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set theme_color(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        theme_color?: string;
    }): ColorStylePB {
        const message = new ColorStylePB({});
        if (data.theme_color != null) {
            message.theme_color = data.theme_color;
        }
        return message;
    }
    toObject() {
        const data: {
            theme_color?: string;
        } = {};
        if (this.theme_color != null) {
            data.theme_color = this.theme_color;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.theme_color.length)
            writer.writeString(1, this.theme_color);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColorStylePB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColorStylePB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.theme_color = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ColorStylePB {
        return ColorStylePB.deserialize(bytes);
    }
}
export class AppIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): AppIdPB {
        const message = new AppIdPB({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AppIdPB {
        return AppIdPB.deserialize(bytes);
    }
}
export class UpdateAppPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5]];
    constructor(data?: any[] | ({
        app_id?: string;
    } & (({
        name?: string;
    }) | ({
        desc?: string;
    }) | ({
        color_style?: ColorStylePB;
    }) | ({
        is_trash?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("app_id" in data && data.app_id != undefined) {
                this.app_id = data.app_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("color_style" in data && data.color_style != undefined) {
                this.color_style = data.color_style;
            }
            if ("is_trash" in data && data.is_trash != undefined) {
                this.is_trash = data.is_trash;
            }
        }
    }
    get app_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set app_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_desc() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get color_style() {
        return pb_1.Message.getWrapperField(this, ColorStylePB, 4) as ColorStylePB;
    }
    set color_style(value: ColorStylePB) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[2], value);
    }
    get has_color_style() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get is_trash() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_trash(value: boolean) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
    }
    get has_is_trash() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_desc() {
        const cases: {
            [index: number]: "none" | "desc";
        } = {
            0: "none",
            3: "desc"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_color_style() {
        const cases: {
            [index: number]: "none" | "color_style";
        } = {
            0: "none",
            4: "color_style"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_is_trash() {
        const cases: {
            [index: number]: "none" | "is_trash";
        } = {
            0: "none",
            5: "is_trash"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        app_id?: string;
        name?: string;
        desc?: string;
        color_style?: ReturnType<typeof ColorStylePB.prototype.toObject>;
        is_trash?: boolean;
    }): UpdateAppPayloadPB {
        const message = new UpdateAppPayloadPB({});
        if (data.app_id != null) {
            message.app_id = data.app_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.color_style != null) {
            message.color_style = ColorStylePB.fromObject(data.color_style);
        }
        if (data.is_trash != null) {
            message.is_trash = data.is_trash;
        }
        return message;
    }
    toObject() {
        const data: {
            app_id?: string;
            name?: string;
            desc?: string;
            color_style?: ReturnType<typeof ColorStylePB.prototype.toObject>;
            is_trash?: boolean;
        } = {};
        if (this.app_id != null) {
            data.app_id = this.app_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.color_style != null) {
            data.color_style = this.color_style.toObject();
        }
        if (this.is_trash != null) {
            data.is_trash = this.is_trash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.app_id.length)
            writer.writeString(1, this.app_id);
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_desc)
            writer.writeString(3, this.desc);
        if (this.has_color_style)
            writer.writeMessage(4, this.color_style, () => this.color_style.serialize(writer));
        if (this.has_is_trash)
            writer.writeBool(5, this.is_trash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAppPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAppPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.app_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.color_style, () => message.color_style = ColorStylePB.deserialize(reader));
                    break;
                case 5:
                    message.is_trash = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateAppPayloadPB {
        return UpdateAppPayloadPB.deserialize(bytes);
    }
}
