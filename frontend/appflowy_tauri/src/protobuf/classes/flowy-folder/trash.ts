/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: trash.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum TrashType {
    TrashUnknown = 0,
    TrashView = 1,
    TrashApp = 2
}
export class TrashPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        modified_time?: number;
        create_time?: number;
        ty?: TrashType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("modified_time" in data && data.modified_time != undefined) {
                this.modified_time = data.modified_time;
            }
            if ("create_time" in data && data.create_time != undefined) {
                this.create_time = data.create_time;
            }
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get modified_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set modified_time(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get create_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set create_time(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 5, TrashType.TrashUnknown) as TrashType;
    }
    set ty(value: TrashType) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        modified_time?: number;
        create_time?: number;
        ty?: TrashType;
    }): TrashPB {
        const message = new TrashPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.modified_time != null) {
            message.modified_time = data.modified_time;
        }
        if (data.create_time != null) {
            message.create_time = data.create_time;
        }
        if (data.ty != null) {
            message.ty = data.ty;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            modified_time?: number;
            create_time?: number;
            ty?: TrashType;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.modified_time != null) {
            data.modified_time = this.modified_time;
        }
        if (this.create_time != null) {
            data.create_time = this.create_time;
        }
        if (this.ty != null) {
            data.ty = this.ty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.modified_time != 0)
            writer.writeInt64(3, this.modified_time);
        if (this.create_time != 0)
            writer.writeInt64(4, this.create_time);
        if (this.ty != TrashType.TrashUnknown)
            writer.writeEnum(5, this.ty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrashPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrashPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.modified_time = reader.readInt64();
                    break;
                case 4:
                    message.create_time = reader.readInt64();
                    break;
                case 5:
                    message.ty = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TrashPB {
        return TrashPB.deserialize(bytes);
    }
}
export class RepeatedTrashPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: TrashPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, TrashPB, 1) as TrashPB[];
    }
    set items(value: TrashPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof TrashPB.prototype.toObject>[];
    }): RepeatedTrashPB {
        const message = new RepeatedTrashPB({});
        if (data.items != null) {
            message.items = data.items.map(item => TrashPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof TrashPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: TrashPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: TrashPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedTrashPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedTrashPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TrashPB.deserialize(reader), TrashPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedTrashPB {
        return RepeatedTrashPB.deserialize(bytes);
    }
}
export class RepeatedTrashIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: TrashIdPB[];
        delete_all?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("delete_all" in data && data.delete_all != undefined) {
                this.delete_all = data.delete_all;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, TrashIdPB, 1) as TrashIdPB[];
    }
    set items(value: TrashIdPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get delete_all() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set delete_all(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof TrashIdPB.prototype.toObject>[];
        delete_all?: boolean;
    }): RepeatedTrashIdPB {
        const message = new RepeatedTrashIdPB({});
        if (data.items != null) {
            message.items = data.items.map(item => TrashIdPB.fromObject(item));
        }
        if (data.delete_all != null) {
            message.delete_all = data.delete_all;
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof TrashIdPB.prototype.toObject>[];
            delete_all?: boolean;
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: TrashIdPB) => item.toObject());
        }
        if (this.delete_all != null) {
            data.delete_all = this.delete_all;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: TrashIdPB) => item.serialize(writer));
        if (this.delete_all != false)
            writer.writeBool(2, this.delete_all);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedTrashIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedTrashIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TrashIdPB.deserialize(reader), TrashIdPB));
                    break;
                case 2:
                    message.delete_all = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedTrashIdPB {
        return RepeatedTrashIdPB.deserialize(bytes);
    }
}
export class TrashIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        ty?: TrashType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 2, TrashType.TrashUnknown) as TrashType;
    }
    set ty(value: TrashType) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        ty?: TrashType;
    }): TrashIdPB {
        const message = new TrashIdPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.ty != null) {
            message.ty = data.ty;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            ty?: TrashType;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.ty != null) {
            data.ty = this.ty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.ty != TrashType.TrashUnknown)
            writer.writeEnum(2, this.ty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrashIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrashIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.ty = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TrashIdPB {
        return TrashIdPB.deserialize(bytes);
    }
}
