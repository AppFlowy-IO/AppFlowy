/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: view.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ViewDataFormatPB {
    DeltaFormat = 0,
    DatabaseFormat = 1,
    TreeFormat = 2
}
export enum ViewLayoutTypePB {
    Document = 0,
    Grid = 3,
    Board = 4,
    Calendar = 5
}
export enum MoveFolderItemType {
    MoveApp = 0,
    MoveView = 1
}
export class ViewPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        app_id?: string;
        name?: string;
        data_format?: ViewDataFormatPB;
        modified_time?: number;
        create_time?: number;
        layout?: ViewLayoutTypePB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("app_id" in data && data.app_id != undefined) {
                this.app_id = data.app_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("data_format" in data && data.data_format != undefined) {
                this.data_format = data.data_format;
            }
            if ("modified_time" in data && data.modified_time != undefined) {
                this.modified_time = data.modified_time;
            }
            if ("create_time" in data && data.create_time != undefined) {
                this.create_time = data.create_time;
            }
            if ("layout" in data && data.layout != undefined) {
                this.layout = data.layout;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get app_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set app_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get data_format() {
        return pb_1.Message.getFieldWithDefault(this, 4, ViewDataFormatPB.DeltaFormat) as ViewDataFormatPB;
    }
    set data_format(value: ViewDataFormatPB) {
        pb_1.Message.setField(this, 4, value);
    }
    get modified_time() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set modified_time(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get create_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set create_time(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get layout() {
        return pb_1.Message.getFieldWithDefault(this, 7, ViewLayoutTypePB.Document) as ViewLayoutTypePB;
    }
    set layout(value: ViewLayoutTypePB) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        id?: string;
        app_id?: string;
        name?: string;
        data_format?: ViewDataFormatPB;
        modified_time?: number;
        create_time?: number;
        layout?: ViewLayoutTypePB;
    }): ViewPB {
        const message = new ViewPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.app_id != null) {
            message.app_id = data.app_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.data_format != null) {
            message.data_format = data.data_format;
        }
        if (data.modified_time != null) {
            message.modified_time = data.modified_time;
        }
        if (data.create_time != null) {
            message.create_time = data.create_time;
        }
        if (data.layout != null) {
            message.layout = data.layout;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            app_id?: string;
            name?: string;
            data_format?: ViewDataFormatPB;
            modified_time?: number;
            create_time?: number;
            layout?: ViewLayoutTypePB;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.app_id != null) {
            data.app_id = this.app_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.data_format != null) {
            data.data_format = this.data_format;
        }
        if (this.modified_time != null) {
            data.modified_time = this.modified_time;
        }
        if (this.create_time != null) {
            data.create_time = this.create_time;
        }
        if (this.layout != null) {
            data.layout = this.layout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.app_id.length)
            writer.writeString(2, this.app_id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.data_format != ViewDataFormatPB.DeltaFormat)
            writer.writeEnum(4, this.data_format);
        if (this.modified_time != 0)
            writer.writeInt64(5, this.modified_time);
        if (this.create_time != 0)
            writer.writeInt64(6, this.create_time);
        if (this.layout != ViewLayoutTypePB.Document)
            writer.writeEnum(7, this.layout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.app_id = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.data_format = reader.readEnum();
                    break;
                case 5:
                    message.modified_time = reader.readInt64();
                    break;
                case 6:
                    message.create_time = reader.readInt64();
                    break;
                case 7:
                    message.layout = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ViewPB {
        return ViewPB.deserialize(bytes);
    }
}
export class RepeatedViewPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: ViewPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, ViewPB, 1) as ViewPB[];
    }
    set items(value: ViewPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof ViewPB.prototype.toObject>[];
    }): RepeatedViewPB {
        const message = new RepeatedViewPB({});
        if (data.items != null) {
            message.items = data.items.map(item => ViewPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof ViewPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: ViewPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: ViewPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedViewPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedViewPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ViewPB.deserialize(reader), ViewPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedViewPB {
        return RepeatedViewPB.deserialize(bytes);
    }
}
export class RepeatedViewIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set items(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        items?: string[];
    }): RepeatedViewIdPB {
        const message = new RepeatedViewIdPB({});
        if (data.items != null) {
            message.items = data.items;
        }
        return message;
    }
    toObject() {
        const data: {
            items?: string[];
        } = {};
        if (this.items != null) {
            data.items = this.items;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedString(1, this.items);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedViewIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedViewIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedViewIdPB {
        return RepeatedViewIdPB.deserialize(bytes);
    }
}
export class CreateViewPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        belong_to_id?: string;
        name?: string;
        desc?: string;
        data_format?: ViewDataFormatPB;
        layout?: ViewLayoutTypePB;
        view_content_data?: Uint8Array;
    } & (({
        thumbnail?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("belong_to_id" in data && data.belong_to_id != undefined) {
                this.belong_to_id = data.belong_to_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("thumbnail" in data && data.thumbnail != undefined) {
                this.thumbnail = data.thumbnail;
            }
            if ("data_format" in data && data.data_format != undefined) {
                this.data_format = data.data_format;
            }
            if ("layout" in data && data.layout != undefined) {
                this.layout = data.layout;
            }
            if ("view_content_data" in data && data.view_content_data != undefined) {
                this.view_content_data = data.view_content_data;
            }
        }
    }
    get belong_to_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set belong_to_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get thumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set thumbnail(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_thumbnail() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get data_format() {
        return pb_1.Message.getFieldWithDefault(this, 5, ViewDataFormatPB.DeltaFormat) as ViewDataFormatPB;
    }
    set data_format(value: ViewDataFormatPB) {
        pb_1.Message.setField(this, 5, value);
    }
    get layout() {
        return pb_1.Message.getFieldWithDefault(this, 6, ViewLayoutTypePB.Document) as ViewLayoutTypePB;
    }
    set layout(value: ViewLayoutTypePB) {
        pb_1.Message.setField(this, 6, value);
    }
    get view_content_data() {
        return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array()) as Uint8Array;
    }
    set view_content_data(value: Uint8Array) {
        pb_1.Message.setField(this, 7, value);
    }
    get one_of_thumbnail() {
        const cases: {
            [index: number]: "none" | "thumbnail";
        } = {
            0: "none",
            4: "thumbnail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        belong_to_id?: string;
        name?: string;
        desc?: string;
        thumbnail?: string;
        data_format?: ViewDataFormatPB;
        layout?: ViewLayoutTypePB;
        view_content_data?: Uint8Array;
    }): CreateViewPayloadPB {
        const message = new CreateViewPayloadPB({});
        if (data.belong_to_id != null) {
            message.belong_to_id = data.belong_to_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.thumbnail != null) {
            message.thumbnail = data.thumbnail;
        }
        if (data.data_format != null) {
            message.data_format = data.data_format;
        }
        if (data.layout != null) {
            message.layout = data.layout;
        }
        if (data.view_content_data != null) {
            message.view_content_data = data.view_content_data;
        }
        return message;
    }
    toObject() {
        const data: {
            belong_to_id?: string;
            name?: string;
            desc?: string;
            thumbnail?: string;
            data_format?: ViewDataFormatPB;
            layout?: ViewLayoutTypePB;
            view_content_data?: Uint8Array;
        } = {};
        if (this.belong_to_id != null) {
            data.belong_to_id = this.belong_to_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.thumbnail != null) {
            data.thumbnail = this.thumbnail;
        }
        if (this.data_format != null) {
            data.data_format = this.data_format;
        }
        if (this.layout != null) {
            data.layout = this.layout;
        }
        if (this.view_content_data != null) {
            data.view_content_data = this.view_content_data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.belong_to_id.length)
            writer.writeString(1, this.belong_to_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.desc.length)
            writer.writeString(3, this.desc);
        if (this.has_thumbnail)
            writer.writeString(4, this.thumbnail);
        if (this.data_format != ViewDataFormatPB.DeltaFormat)
            writer.writeEnum(5, this.data_format);
        if (this.layout != ViewLayoutTypePB.Document)
            writer.writeEnum(6, this.layout);
        if (this.view_content_data.length)
            writer.writeBytes(7, this.view_content_data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateViewPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateViewPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.belong_to_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    message.thumbnail = reader.readString();
                    break;
                case 5:
                    message.data_format = reader.readEnum();
                    break;
                case 6:
                    message.layout = reader.readEnum();
                    break;
                case 7:
                    message.view_content_data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateViewPayloadPB {
        return CreateViewPayloadPB.deserialize(bytes);
    }
}
export class ViewIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): ViewIdPB {
        const message = new ViewIdPB({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ViewIdPB {
        return ViewIdPB.deserialize(bytes);
    }
}
export class DeletedViewPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        view_id?: string;
    } & (({
        index?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_index() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_index() {
        const cases: {
            [index: number]: "none" | "index";
        } = {
            0: "none",
            2: "index"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        view_id?: string;
        index?: number;
    }): DeletedViewPB {
        const message = new DeletedViewPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.index != null) {
            message.index = data.index;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            index?: number;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.index != null) {
            data.index = this.index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.has_index)
            writer.writeInt32(2, this.index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletedViewPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletedViewPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.index = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeletedViewPB {
        return DeletedViewPB.deserialize(bytes);
    }
}
export class UpdateViewPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4]];
    constructor(data?: any[] | ({
        view_id?: string;
    } & (({
        name?: string;
    }) | ({
        desc?: string;
    }) | ({
        thumbnail?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("thumbnail" in data && data.thumbnail != undefined) {
                this.thumbnail = data.thumbnail;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_desc() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get thumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set thumbnail(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_thumbnail() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_desc() {
        const cases: {
            [index: number]: "none" | "desc";
        } = {
            0: "none",
            3: "desc"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_thumbnail() {
        const cases: {
            [index: number]: "none" | "thumbnail";
        } = {
            0: "none",
            4: "thumbnail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        view_id?: string;
        name?: string;
        desc?: string;
        thumbnail?: string;
    }): UpdateViewPayloadPB {
        const message = new UpdateViewPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.thumbnail != null) {
            message.thumbnail = data.thumbnail;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            name?: string;
            desc?: string;
            thumbnail?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.thumbnail != null) {
            data.thumbnail = this.thumbnail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_desc)
            writer.writeString(3, this.desc);
        if (this.has_thumbnail)
            writer.writeString(4, this.thumbnail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateViewPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateViewPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    message.thumbnail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateViewPayloadPB {
        return UpdateViewPayloadPB.deserialize(bytes);
    }
}
export class MoveFolderItemPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        item_id?: string;
        from?: number;
        to?: number;
        ty?: MoveFolderItemType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("item_id" in data && data.item_id != undefined) {
                this.item_id = data.item_id;
            }
            if ("from" in data && data.from != undefined) {
                this.from = data.from;
            }
            if ("to" in data && data.to != undefined) {
                this.to = data.to;
            }
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
        }
    }
    get item_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set item_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set from(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get to() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set to(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 4, MoveFolderItemType.MoveApp) as MoveFolderItemType;
    }
    set ty(value: MoveFolderItemType) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        item_id?: string;
        from?: number;
        to?: number;
        ty?: MoveFolderItemType;
    }): MoveFolderItemPayloadPB {
        const message = new MoveFolderItemPayloadPB({});
        if (data.item_id != null) {
            message.item_id = data.item_id;
        }
        if (data.from != null) {
            message.from = data.from;
        }
        if (data.to != null) {
            message.to = data.to;
        }
        if (data.ty != null) {
            message.ty = data.ty;
        }
        return message;
    }
    toObject() {
        const data: {
            item_id?: string;
            from?: number;
            to?: number;
            ty?: MoveFolderItemType;
        } = {};
        if (this.item_id != null) {
            data.item_id = this.item_id;
        }
        if (this.from != null) {
            data.from = this.from;
        }
        if (this.to != null) {
            data.to = this.to;
        }
        if (this.ty != null) {
            data.ty = this.ty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.item_id.length)
            writer.writeString(1, this.item_id);
        if (this.from != 0)
            writer.writeInt32(2, this.from);
        if (this.to != 0)
            writer.writeInt32(3, this.to);
        if (this.ty != MoveFolderItemType.MoveApp)
            writer.writeEnum(4, this.ty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveFolderItemPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveFolderItemPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.item_id = reader.readString();
                    break;
                case 2:
                    message.from = reader.readInt32();
                    break;
                case 3:
                    message.to = reader.readInt32();
                    break;
                case 4:
                    message.ty = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveFolderItemPayloadPB {
        return MoveFolderItemPayloadPB.deserialize(bytes);
    }
}
