/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: workspace.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./app";
import * as dependency_2 from "./view";
import * as pb_1 from "google-protobuf";
export class WorkspacePB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        desc?: string;
        apps?: dependency_1.RepeatedAppPB;
        modified_time?: number;
        create_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("apps" in data && data.apps != undefined) {
                this.apps = data.apps;
            }
            if ("modified_time" in data && data.modified_time != undefined) {
                this.modified_time = data.modified_time;
            }
            if ("create_time" in data && data.create_time != undefined) {
                this.create_time = data.create_time;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get apps() {
        return pb_1.Message.getWrapperField(this, dependency_1.RepeatedAppPB, 4) as dependency_1.RepeatedAppPB;
    }
    set apps(value: dependency_1.RepeatedAppPB) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_apps() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get modified_time() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set modified_time(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get create_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set create_time(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        desc?: string;
        apps?: ReturnType<typeof dependency_1.RepeatedAppPB.prototype.toObject>;
        modified_time?: number;
        create_time?: number;
    }): WorkspacePB {
        const message = new WorkspacePB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.apps != null) {
            message.apps = dependency_1.RepeatedAppPB.fromObject(data.apps);
        }
        if (data.modified_time != null) {
            message.modified_time = data.modified_time;
        }
        if (data.create_time != null) {
            message.create_time = data.create_time;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            desc?: string;
            apps?: ReturnType<typeof dependency_1.RepeatedAppPB.prototype.toObject>;
            modified_time?: number;
            create_time?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.apps != null) {
            data.apps = this.apps.toObject();
        }
        if (this.modified_time != null) {
            data.modified_time = this.modified_time;
        }
        if (this.create_time != null) {
            data.create_time = this.create_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.desc.length)
            writer.writeString(3, this.desc);
        if (this.has_apps)
            writer.writeMessage(4, this.apps, () => this.apps.serialize(writer));
        if (this.modified_time != 0)
            writer.writeInt64(5, this.modified_time);
        if (this.create_time != 0)
            writer.writeInt64(6, this.create_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkspacePB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkspacePB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.apps, () => message.apps = dependency_1.RepeatedAppPB.deserialize(reader));
                    break;
                case 5:
                    message.modified_time = reader.readInt64();
                    break;
                case 6:
                    message.create_time = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WorkspacePB {
        return WorkspacePB.deserialize(bytes);
    }
}
export class RepeatedWorkspacePB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: WorkspacePB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, WorkspacePB, 1) as WorkspacePB[];
    }
    set items(value: WorkspacePB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof WorkspacePB.prototype.toObject>[];
    }): RepeatedWorkspacePB {
        const message = new RepeatedWorkspacePB({});
        if (data.items != null) {
            message.items = data.items.map(item => WorkspacePB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof WorkspacePB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: WorkspacePB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: WorkspacePB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedWorkspacePB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedWorkspacePB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkspacePB.deserialize(reader), WorkspacePB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedWorkspacePB {
        return RepeatedWorkspacePB.deserialize(bytes);
    }
}
export class CreateWorkspacePayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        desc?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        desc?: string;
    }): CreateWorkspacePayloadPB {
        const message = new CreateWorkspacePayloadPB({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            desc?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.desc.length)
            writer.writeString(2, this.desc);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorkspacePayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorkspacePayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.desc = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateWorkspacePayloadPB {
        return CreateWorkspacePayloadPB.deserialize(bytes);
    }
}
export class WorkspaceIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        value?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_value() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get one_of_value() {
        const cases: {
            [index: number]: "none" | "value";
        } = {
            0: "none",
            1: "value"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        value?: string;
    }): WorkspaceIdPB {
        const message = new WorkspaceIdPB({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_value)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkspaceIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkspaceIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WorkspaceIdPB {
        return WorkspaceIdPB.deserialize(bytes);
    }
}
export class WorkspaceSettingPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        workspace?: WorkspacePB;
    } & (({
        latest_view?: dependency_2.ViewPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("workspace" in data && data.workspace != undefined) {
                this.workspace = data.workspace;
            }
            if ("latest_view" in data && data.latest_view != undefined) {
                this.latest_view = data.latest_view;
            }
        }
    }
    get workspace() {
        return pb_1.Message.getWrapperField(this, WorkspacePB, 1) as WorkspacePB;
    }
    set workspace(value: WorkspacePB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_workspace() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get latest_view() {
        return pb_1.Message.getWrapperField(this, dependency_2.ViewPB, 2) as dependency_2.ViewPB;
    }
    set latest_view(value: dependency_2.ViewPB) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_latest_view() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_latest_view() {
        const cases: {
            [index: number]: "none" | "latest_view";
        } = {
            0: "none",
            2: "latest_view"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        workspace?: ReturnType<typeof WorkspacePB.prototype.toObject>;
        latest_view?: ReturnType<typeof dependency_2.ViewPB.prototype.toObject>;
    }): WorkspaceSettingPB {
        const message = new WorkspaceSettingPB({});
        if (data.workspace != null) {
            message.workspace = WorkspacePB.fromObject(data.workspace);
        }
        if (data.latest_view != null) {
            message.latest_view = dependency_2.ViewPB.fromObject(data.latest_view);
        }
        return message;
    }
    toObject() {
        const data: {
            workspace?: ReturnType<typeof WorkspacePB.prototype.toObject>;
            latest_view?: ReturnType<typeof dependency_2.ViewPB.prototype.toObject>;
        } = {};
        if (this.workspace != null) {
            data.workspace = this.workspace.toObject();
        }
        if (this.latest_view != null) {
            data.latest_view = this.latest_view.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_workspace)
            writer.writeMessage(1, this.workspace, () => this.workspace.serialize(writer));
        if (this.has_latest_view)
            writer.writeMessage(2, this.latest_view, () => this.latest_view.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkspaceSettingPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkspaceSettingPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.workspace, () => message.workspace = WorkspacePB.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.latest_view, () => message.latest_view = dependency_2.ViewPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WorkspaceSettingPB {
        return WorkspaceSettingPB.deserialize(bytes);
    }
}
export class UpdateWorkspacePayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(data?: any[] | ({
        id?: string;
    } & (({
        name?: string;
    }) | ({
        desc?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_desc() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_desc() {
        const cases: {
            [index: number]: "none" | "desc";
        } = {
            0: "none",
            3: "desc"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        desc?: string;
    }): UpdateWorkspacePayloadPB {
        const message = new UpdateWorkspacePayloadPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            desc?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_desc)
            writer.writeString(3, this.desc);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWorkspacePayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWorkspacePayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateWorkspacePayloadPB {
        return UpdateWorkspacePayloadPB.deserialize(bytes);
    }
}
