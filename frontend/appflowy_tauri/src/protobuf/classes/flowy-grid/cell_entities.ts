/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: cell_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./field_entities";
import * as pb_1 from "google-protobuf";
export class CreateSelectOptionPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        grid_id?: string;
        option_name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("option_name" in data && data.option_name != undefined) {
                this.option_name = data.option_name;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get option_name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set option_name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        field_id?: string;
        grid_id?: string;
        option_name?: string;
    }): CreateSelectOptionPayloadPB {
        const message = new CreateSelectOptionPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.option_name != null) {
            message.option_name = data.option_name;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            grid_id?: string;
            option_name?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.option_name != null) {
            data.option_name = this.option_name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.grid_id.length)
            writer.writeString(2, this.grid_id);
        if (this.option_name.length)
            writer.writeString(3, this.option_name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSelectOptionPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSelectOptionPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.grid_id = reader.readString();
                    break;
                case 3:
                    message.option_name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateSelectOptionPayloadPB {
        return CreateSelectOptionPayloadPB.deserialize(bytes);
    }
}
export class CellPathPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        field_id?: string;
        row_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        view_id?: string;
        field_id?: string;
        row_id?: string;
    }): CellPathPB {
        const message = new CellPathPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            field_id?: string;
            row_id?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.row_id.length)
            writer.writeString(3, this.row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CellPathPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CellPathPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CellPathPB {
        return CellPathPB.deserialize(bytes);
    }
}
export class CellPB extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        field_id?: string;
        row_id?: string;
        data?: Uint8Array;
    } & (({
        field_type?: dependency_1.FieldType;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_field_type() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get one_of_field_type() {
        const cases: {
            [index: number]: "none" | "field_type";
        } = {
            0: "none",
            4: "field_type"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        field_id?: string;
        row_id?: string;
        data?: Uint8Array;
        field_type?: dependency_1.FieldType;
    }): CellPB {
        const message = new CellPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            row_id?: string;
            data?: Uint8Array;
            field_type?: dependency_1.FieldType;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.row_id.length)
            writer.writeString(2, this.row_id);
        if (this.data.length)
            writer.writeBytes(3, this.data);
        if (this.has_field_type)
            writer.writeEnum(4, this.field_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CellPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CellPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.row_id = reader.readString();
                    break;
                case 3:
                    message.data = reader.readBytes();
                    break;
                case 4:
                    message.field_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CellPB {
        return CellPB.deserialize(bytes);
    }
}
export class RepeatedCellPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: CellPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, CellPB, 1) as CellPB[];
    }
    set items(value: CellPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof CellPB.prototype.toObject>[];
    }): RepeatedCellPB {
        const message = new RepeatedCellPB({});
        if (data.items != null) {
            message.items = data.items.map(item => CellPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof CellPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: CellPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: CellPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedCellPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedCellPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CellPB.deserialize(reader), CellPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedCellPB {
        return RepeatedCellPB.deserialize(bytes);
    }
}
export class CellChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        row_id?: string;
        field_id?: string;
        type_cell_data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("type_cell_data" in data && data.type_cell_data != undefined) {
                this.type_cell_data = data.type_cell_data;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get type_cell_data() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set type_cell_data(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        grid_id?: string;
        row_id?: string;
        field_id?: string;
        type_cell_data?: string;
    }): CellChangesetPB {
        const message = new CellChangesetPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.type_cell_data != null) {
            message.type_cell_data = data.type_cell_data;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            row_id?: string;
            field_id?: string;
            type_cell_data?: string;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.type_cell_data != null) {
            data.type_cell_data = this.type_cell_data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.row_id.length)
            writer.writeString(2, this.row_id);
        if (this.field_id.length)
            writer.writeString(3, this.field_id);
        if (this.type_cell_data.length)
            writer.writeString(4, this.type_cell_data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CellChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CellChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.row_id = reader.readString();
                    break;
                case 3:
                    message.field_id = reader.readString();
                    break;
                case 4:
                    message.type_cell_data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CellChangesetPB {
        return CellChangesetPB.deserialize(bytes);
    }
}
