/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: configuration.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum DateCondition {
    Relative = 0,
    Day = 1,
    Week = 2,
    Month = 3,
    Year = 4
}
export class UrlGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hide_empty?: boolean;
    }): UrlGroupConfigurationPB {
        const message = new UrlGroupConfigurationPB({});
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            hide_empty?: boolean;
        } = {};
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hide_empty != false)
            writer.writeBool(1, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UrlGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UrlGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UrlGroupConfigurationPB {
        return UrlGroupConfigurationPB.deserialize(bytes);
    }
}
export class TextGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hide_empty?: boolean;
    }): TextGroupConfigurationPB {
        const message = new TextGroupConfigurationPB({});
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            hide_empty?: boolean;
        } = {};
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hide_empty != false)
            writer.writeBool(1, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TextGroupConfigurationPB {
        return TextGroupConfigurationPB.deserialize(bytes);
    }
}
export class SelectOptionGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hide_empty?: boolean;
    }): SelectOptionGroupConfigurationPB {
        const message = new SelectOptionGroupConfigurationPB({});
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            hide_empty?: boolean;
        } = {};
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hide_empty != false)
            writer.writeBool(1, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SelectOptionGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SelectOptionGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SelectOptionGroupConfigurationPB {
        return SelectOptionGroupConfigurationPB.deserialize(bytes);
    }
}
export class GroupRecordPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: string;
        visible?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("visible" in data && data.visible != undefined) {
                this.visible = data.visible;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get visible() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set visible(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        group_id?: string;
        visible?: boolean;
    }): GroupRecordPB {
        const message = new GroupRecordPB({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.visible != null) {
            message.visible = data.visible;
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
            visible?: boolean;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.visible != null) {
            data.visible = this.visible;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (this.visible != false)
            writer.writeBool(2, this.visible);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupRecordPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupRecordPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                case 2:
                    message.visible = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupRecordPB {
        return GroupRecordPB.deserialize(bytes);
    }
}
export class NumberGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hide_empty?: boolean;
    }): NumberGroupConfigurationPB {
        const message = new NumberGroupConfigurationPB({});
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            hide_empty?: boolean;
        } = {};
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hide_empty != false)
            writer.writeBool(1, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NumberGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NumberGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NumberGroupConfigurationPB {
        return NumberGroupConfigurationPB.deserialize(bytes);
    }
}
export class DateGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        condition?: DateCondition;
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("condition" in data && data.condition != undefined) {
                this.condition = data.condition;
            }
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get condition() {
        return pb_1.Message.getFieldWithDefault(this, 1, DateCondition.Relative) as DateCondition;
    }
    set condition(value: DateCondition) {
        pb_1.Message.setField(this, 1, value);
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        condition?: DateCondition;
        hide_empty?: boolean;
    }): DateGroupConfigurationPB {
        const message = new DateGroupConfigurationPB({});
        if (data.condition != null) {
            message.condition = data.condition;
        }
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            condition?: DateCondition;
            hide_empty?: boolean;
        } = {};
        if (this.condition != null) {
            data.condition = this.condition;
        }
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.condition != DateCondition.Relative)
            writer.writeEnum(1, this.condition);
        if (this.hide_empty != false)
            writer.writeBool(2, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.condition = reader.readEnum();
                    break;
                case 2:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DateGroupConfigurationPB {
        return DateGroupConfigurationPB.deserialize(bytes);
    }
}
export class CheckboxGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hide_empty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hide_empty" in data && data.hide_empty != undefined) {
                this.hide_empty = data.hide_empty;
            }
        }
    }
    get hide_empty() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set hide_empty(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hide_empty?: boolean;
    }): CheckboxGroupConfigurationPB {
        const message = new CheckboxGroupConfigurationPB({});
        if (data.hide_empty != null) {
            message.hide_empty = data.hide_empty;
        }
        return message;
    }
    toObject() {
        const data: {
            hide_empty?: boolean;
        } = {};
        if (this.hide_empty != null) {
            data.hide_empty = this.hide_empty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hide_empty != false)
            writer.writeBool(1, this.hide_empty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckboxGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckboxGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hide_empty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckboxGroupConfigurationPB {
        return CheckboxGroupConfigurationPB.deserialize(bytes);
    }
}
