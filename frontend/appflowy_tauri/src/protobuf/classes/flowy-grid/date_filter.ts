/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: date_filter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum DateFilterConditionPB {
    DateIs = 0,
    DateBefore = 1,
    DateAfter = 2,
    DateOnOrBefore = 3,
    DateOnOrAfter = 4,
    DateWithIn = 5,
    DateIsEmpty = 6,
    DateIsNotEmpty = 7
}
export class DateFilterPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4]];
    constructor(data?: any[] | ({
        condition?: DateFilterConditionPB;
    } & (({
        start?: number;
    }) | ({
        end?: number;
    }) | ({
        timestamp?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("condition" in data && data.condition != undefined) {
                this.condition = data.condition;
            }
            if ("start" in data && data.start != undefined) {
                this.start = data.start;
            }
            if ("end" in data && data.end != undefined) {
                this.end = data.end;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get condition() {
        return pb_1.Message.getFieldWithDefault(this, 1, DateFilterConditionPB.DateIs) as DateFilterConditionPB;
    }
    set condition(value: DateFilterConditionPB) {
        pb_1.Message.setField(this, 1, value);
    }
    get start() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set start(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_start() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get end() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set end(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_end() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_timestamp() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get one_of_start() {
        const cases: {
            [index: number]: "none" | "start";
        } = {
            0: "none",
            2: "start"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_end() {
        const cases: {
            [index: number]: "none" | "end";
        } = {
            0: "none",
            3: "end"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_timestamp() {
        const cases: {
            [index: number]: "none" | "timestamp";
        } = {
            0: "none",
            4: "timestamp"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        condition?: DateFilterConditionPB;
        start?: number;
        end?: number;
        timestamp?: number;
    }): DateFilterPB {
        const message = new DateFilterPB({});
        if (data.condition != null) {
            message.condition = data.condition;
        }
        if (data.start != null) {
            message.start = data.start;
        }
        if (data.end != null) {
            message.end = data.end;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        return message;
    }
    toObject() {
        const data: {
            condition?: DateFilterConditionPB;
            start?: number;
            end?: number;
            timestamp?: number;
        } = {};
        if (this.condition != null) {
            data.condition = this.condition;
        }
        if (this.start != null) {
            data.start = this.start;
        }
        if (this.end != null) {
            data.end = this.end;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.condition != DateFilterConditionPB.DateIs)
            writer.writeEnum(1, this.condition);
        if (this.has_start)
            writer.writeInt64(2, this.start);
        if (this.has_end)
            writer.writeInt64(3, this.end);
        if (this.has_timestamp)
            writer.writeInt64(4, this.timestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateFilterPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateFilterPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.condition = reader.readEnum();
                    break;
                case 2:
                    message.start = reader.readInt64();
                    break;
                case 3:
                    message.end = reader.readInt64();
                    break;
                case 4:
                    message.timestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DateFilterPB {
        return DateFilterPB.deserialize(bytes);
    }
}
