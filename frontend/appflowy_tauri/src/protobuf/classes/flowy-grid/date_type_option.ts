/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: date_type_option.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./date_type_option_entities";
import * as pb_1 from "google-protobuf";
export class DateTypeOptionPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date_format?: dependency_1.DateFormat;
        time_format?: dependency_1.TimeFormat;
        include_time?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date_format" in data && data.date_format != undefined) {
                this.date_format = data.date_format;
            }
            if ("time_format" in data && data.time_format != undefined) {
                this.time_format = data.time_format;
            }
            if ("include_time" in data && data.include_time != undefined) {
                this.include_time = data.include_time;
            }
        }
    }
    get date_format() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.DateFormat.Local) as dependency_1.DateFormat;
    }
    set date_format(value: dependency_1.DateFormat) {
        pb_1.Message.setField(this, 1, value);
    }
    get time_format() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.TimeFormat.TwelveHour) as dependency_1.TimeFormat;
    }
    set time_format(value: dependency_1.TimeFormat) {
        pb_1.Message.setField(this, 2, value);
    }
    get include_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set include_time(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        date_format?: dependency_1.DateFormat;
        time_format?: dependency_1.TimeFormat;
        include_time?: boolean;
    }): DateTypeOptionPB {
        const message = new DateTypeOptionPB({});
        if (data.date_format != null) {
            message.date_format = data.date_format;
        }
        if (data.time_format != null) {
            message.time_format = data.time_format;
        }
        if (data.include_time != null) {
            message.include_time = data.include_time;
        }
        return message;
    }
    toObject() {
        const data: {
            date_format?: dependency_1.DateFormat;
            time_format?: dependency_1.TimeFormat;
            include_time?: boolean;
        } = {};
        if (this.date_format != null) {
            data.date_format = this.date_format;
        }
        if (this.time_format != null) {
            data.time_format = this.time_format;
        }
        if (this.include_time != null) {
            data.include_time = this.include_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date_format != dependency_1.DateFormat.Local)
            writer.writeEnum(1, this.date_format);
        if (this.time_format != dependency_1.TimeFormat.TwelveHour)
            writer.writeEnum(2, this.time_format);
        if (this.include_time != false)
            writer.writeBool(3, this.include_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateTypeOptionPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateTypeOptionPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date_format = reader.readEnum();
                    break;
                case 2:
                    message.time_format = reader.readEnum();
                    break;
                case 3:
                    message.include_time = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DateTypeOptionPB {
        return DateTypeOptionPB.deserialize(bytes);
    }
}
