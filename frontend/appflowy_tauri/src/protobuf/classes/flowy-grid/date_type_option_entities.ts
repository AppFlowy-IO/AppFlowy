/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: date_type_option_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./cell_entities";
import * as pb_1 from "google-protobuf";
export enum DateFormat {
    Local = 0,
    US = 1,
    ISO = 2,
    Friendly = 3
}
export enum TimeFormat {
    TwelveHour = 0,
    TwentyFourHour = 1
}
export class DateCellDataPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date?: string;
        time?: string;
        timestamp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set time(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        date?: string;
        time?: string;
        timestamp?: number;
    }): DateCellDataPB {
        const message = new DateCellDataPB({});
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.time != null) {
            message.time = data.time;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        return message;
    }
    toObject() {
        const data: {
            date?: string;
            time?: string;
            timestamp?: number;
        } = {};
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.time != null) {
            data.time = this.time;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date.length)
            writer.writeString(1, this.date);
        if (this.time.length)
            writer.writeString(2, this.time);
        if (this.timestamp != 0)
            writer.writeInt64(3, this.timestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateCellDataPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateCellDataPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date = reader.readString();
                    break;
                case 2:
                    message.time = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DateCellDataPB {
        return DateCellDataPB.deserialize(bytes);
    }
}
export class DateChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(data?: any[] | ({
        cell_path?: dependency_1.CellPathPB;
        is_utc?: boolean;
    } & (({
        date?: string;
    }) | ({
        time?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cell_path" in data && data.cell_path != undefined) {
                this.cell_path = data.cell_path;
            }
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("is_utc" in data && data.is_utc != undefined) {
                this.is_utc = data.is_utc;
            }
        }
    }
    get cell_path() {
        return pb_1.Message.getWrapperField(this, dependency_1.CellPathPB, 1) as dependency_1.CellPathPB;
    }
    set cell_path(value: dependency_1.CellPathPB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_cell_path() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_date() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set time(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_time() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get is_utc() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_utc(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get one_of_date() {
        const cases: {
            [index: number]: "none" | "date";
        } = {
            0: "none",
            2: "date"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_time() {
        const cases: {
            [index: number]: "none" | "time";
        } = {
            0: "none",
            3: "time"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        cell_path?: ReturnType<typeof dependency_1.CellPathPB.prototype.toObject>;
        date?: string;
        time?: string;
        is_utc?: boolean;
    }): DateChangesetPB {
        const message = new DateChangesetPB({});
        if (data.cell_path != null) {
            message.cell_path = dependency_1.CellPathPB.fromObject(data.cell_path);
        }
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.time != null) {
            message.time = data.time;
        }
        if (data.is_utc != null) {
            message.is_utc = data.is_utc;
        }
        return message;
    }
    toObject() {
        const data: {
            cell_path?: ReturnType<typeof dependency_1.CellPathPB.prototype.toObject>;
            date?: string;
            time?: string;
            is_utc?: boolean;
        } = {};
        if (this.cell_path != null) {
            data.cell_path = this.cell_path.toObject();
        }
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.time != null) {
            data.time = this.time;
        }
        if (this.is_utc != null) {
            data.is_utc = this.is_utc;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_cell_path)
            writer.writeMessage(1, this.cell_path, () => this.cell_path.serialize(writer));
        if (this.has_date)
            writer.writeString(2, this.date);
        if (this.has_time)
            writer.writeString(3, this.time);
        if (this.is_utc != false)
            writer.writeBool(4, this.is_utc);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.cell_path, () => message.cell_path = dependency_1.CellPathPB.deserialize(reader));
                    break;
                case 2:
                    message.date = reader.readString();
                    break;
                case 3:
                    message.time = reader.readString();
                    break;
                case 4:
                    message.is_utc = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DateChangesetPB {
        return DateChangesetPB.deserialize(bytes);
    }
}
