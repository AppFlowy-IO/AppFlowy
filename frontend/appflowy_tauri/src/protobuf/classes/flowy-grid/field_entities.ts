/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: field_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum FieldType {
    RichText = 0,
    Number = 1,
    DateTime = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    Checkbox = 5,
    URL = 6,
    Checklist = 7
}
export class FieldPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        desc?: string;
        field_type?: FieldType;
        frozen?: boolean;
        visibility?: boolean;
        width?: number;
        is_primary?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("frozen" in data && data.frozen != undefined) {
                this.frozen = data.frozen;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
            if ("is_primary" in data && data.is_primary != undefined) {
                this.is_primary = data.is_primary;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, FieldType.RichText) as FieldType;
    }
    set field_type(value: FieldType) {
        pb_1.Message.setField(this, 4, value);
    }
    get frozen() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set frozen(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set visibility(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_primary() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set is_primary(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        desc?: string;
        field_type?: FieldType;
        frozen?: boolean;
        visibility?: boolean;
        width?: number;
        is_primary?: boolean;
    }): FieldPB {
        const message = new FieldPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.frozen != null) {
            message.frozen = data.frozen;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        if (data.is_primary != null) {
            message.is_primary = data.is_primary;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            desc?: string;
            field_type?: FieldType;
            frozen?: boolean;
            visibility?: boolean;
            width?: number;
            is_primary?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.frozen != null) {
            data.frozen = this.frozen;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        if (this.width != null) {
            data.width = this.width;
        }
        if (this.is_primary != null) {
            data.is_primary = this.is_primary;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.desc.length)
            writer.writeString(3, this.desc);
        if (this.field_type != FieldType.RichText)
            writer.writeEnum(4, this.field_type);
        if (this.frozen != false)
            writer.writeBool(5, this.frozen);
        if (this.visibility != false)
            writer.writeBool(6, this.visibility);
        if (this.width != 0)
            writer.writeInt32(7, this.width);
        if (this.is_primary != false)
            writer.writeBool(8, this.is_primary);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    message.field_type = reader.readEnum();
                    break;
                case 5:
                    message.frozen = reader.readBool();
                    break;
                case 6:
                    message.visibility = reader.readBool();
                    break;
                case 7:
                    message.width = reader.readInt32();
                    break;
                case 8:
                    message.is_primary = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldPB {
        return FieldPB.deserialize(bytes);
    }
}
export class FieldIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        field_id?: string;
    }): FieldIdPB {
        const message = new FieldIdPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldIdPB {
        return FieldIdPB.deserialize(bytes);
    }
}
export class GridFieldChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        inserted_fields?: IndexFieldPB[];
        deleted_fields?: FieldIdPB[];
        updated_fields?: FieldPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("inserted_fields" in data && data.inserted_fields != undefined) {
                this.inserted_fields = data.inserted_fields;
            }
            if ("deleted_fields" in data && data.deleted_fields != undefined) {
                this.deleted_fields = data.deleted_fields;
            }
            if ("updated_fields" in data && data.updated_fields != undefined) {
                this.updated_fields = data.updated_fields;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get inserted_fields() {
        return pb_1.Message.getRepeatedWrapperField(this, IndexFieldPB, 2) as IndexFieldPB[];
    }
    set inserted_fields(value: IndexFieldPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get deleted_fields() {
        return pb_1.Message.getRepeatedWrapperField(this, FieldIdPB, 3) as FieldIdPB[];
    }
    set deleted_fields(value: FieldIdPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get updated_fields() {
        return pb_1.Message.getRepeatedWrapperField(this, FieldPB, 4) as FieldPB[];
    }
    set updated_fields(value: FieldPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        grid_id?: string;
        inserted_fields?: ReturnType<typeof IndexFieldPB.prototype.toObject>[];
        deleted_fields?: ReturnType<typeof FieldIdPB.prototype.toObject>[];
        updated_fields?: ReturnType<typeof FieldPB.prototype.toObject>[];
    }): GridFieldChangesetPB {
        const message = new GridFieldChangesetPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.inserted_fields != null) {
            message.inserted_fields = data.inserted_fields.map(item => IndexFieldPB.fromObject(item));
        }
        if (data.deleted_fields != null) {
            message.deleted_fields = data.deleted_fields.map(item => FieldIdPB.fromObject(item));
        }
        if (data.updated_fields != null) {
            message.updated_fields = data.updated_fields.map(item => FieldPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            inserted_fields?: ReturnType<typeof IndexFieldPB.prototype.toObject>[];
            deleted_fields?: ReturnType<typeof FieldIdPB.prototype.toObject>[];
            updated_fields?: ReturnType<typeof FieldPB.prototype.toObject>[];
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.inserted_fields != null) {
            data.inserted_fields = this.inserted_fields.map((item: IndexFieldPB) => item.toObject());
        }
        if (this.deleted_fields != null) {
            data.deleted_fields = this.deleted_fields.map((item: FieldIdPB) => item.toObject());
        }
        if (this.updated_fields != null) {
            data.updated_fields = this.updated_fields.map((item: FieldPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.inserted_fields.length)
            writer.writeRepeatedMessage(2, this.inserted_fields, (item: IndexFieldPB) => item.serialize(writer));
        if (this.deleted_fields.length)
            writer.writeRepeatedMessage(3, this.deleted_fields, (item: FieldIdPB) => item.serialize(writer));
        if (this.updated_fields.length)
            writer.writeRepeatedMessage(4, this.updated_fields, (item: FieldPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridFieldChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridFieldChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.inserted_fields, () => pb_1.Message.addToRepeatedWrapperField(message, 2, IndexFieldPB.deserialize(reader), IndexFieldPB));
                    break;
                case 3:
                    reader.readMessage(message.deleted_fields, () => pb_1.Message.addToRepeatedWrapperField(message, 3, FieldIdPB.deserialize(reader), FieldIdPB));
                    break;
                case 4:
                    reader.readMessage(message.updated_fields, () => pb_1.Message.addToRepeatedWrapperField(message, 4, FieldPB.deserialize(reader), FieldPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridFieldChangesetPB {
        return GridFieldChangesetPB.deserialize(bytes);
    }
}
export class IndexFieldPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field?: FieldPB;
        index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field" in data && data.field != undefined) {
                this.field = data.field;
            }
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
        }
    }
    get field() {
        return pb_1.Message.getWrapperField(this, FieldPB, 1) as FieldPB;
    }
    set field(value: FieldPB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_field() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        field?: ReturnType<typeof FieldPB.prototype.toObject>;
        index?: number;
    }): IndexFieldPB {
        const message = new IndexFieldPB({});
        if (data.field != null) {
            message.field = FieldPB.fromObject(data.field);
        }
        if (data.index != null) {
            message.index = data.index;
        }
        return message;
    }
    toObject() {
        const data: {
            field?: ReturnType<typeof FieldPB.prototype.toObject>;
            index?: number;
        } = {};
        if (this.field != null) {
            data.field = this.field.toObject();
        }
        if (this.index != null) {
            data.index = this.index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_field)
            writer.writeMessage(1, this.field, () => this.field.serialize(writer));
        if (this.index != 0)
            writer.writeInt32(2, this.index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexFieldPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexFieldPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.field, () => message.field = FieldPB.deserialize(reader));
                    break;
                case 2:
                    message.index = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IndexFieldPB {
        return IndexFieldPB.deserialize(bytes);
    }
}
export class CreateFieldPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        grid_id?: string;
        field_type?: FieldType;
    } & (({
        type_option_data?: Uint8Array;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("type_option_data" in data && data.type_option_data != undefined) {
                this.type_option_data = data.type_option_data;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, FieldType.RichText) as FieldType;
    }
    set field_type(value: FieldType) {
        pb_1.Message.setField(this, 2, value);
    }
    get type_option_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set type_option_data(value: Uint8Array) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_type_option_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get one_of_type_option_data() {
        const cases: {
            [index: number]: "none" | "type_option_data";
        } = {
            0: "none",
            3: "type_option_data"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        grid_id?: string;
        field_type?: FieldType;
        type_option_data?: Uint8Array;
    }): CreateFieldPayloadPB {
        const message = new CreateFieldPayloadPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.type_option_data != null) {
            message.type_option_data = data.type_option_data;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_type?: FieldType;
            type_option_data?: Uint8Array;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.type_option_data != null) {
            data.type_option_data = this.type_option_data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.field_type != FieldType.RichText)
            writer.writeEnum(2, this.field_type);
        if (this.has_type_option_data)
            writer.writeBytes(3, this.type_option_data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFieldPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFieldPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.field_type = reader.readEnum();
                    break;
                case 3:
                    message.type_option_data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateFieldPayloadPB {
        return CreateFieldPayloadPB.deserialize(bytes);
    }
}
export class EditFieldChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        field_id?: string;
        field_type?: FieldType;
        create_if_not_exist?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("create_if_not_exist" in data && data.create_if_not_exist != undefined) {
                this.create_if_not_exist = data.create_if_not_exist;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, FieldType.RichText) as FieldType;
    }
    set field_type(value: FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get create_if_not_exist() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set create_if_not_exist(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        grid_id?: string;
        field_id?: string;
        field_type?: FieldType;
        create_if_not_exist?: boolean;
    }): EditFieldChangesetPB {
        const message = new EditFieldChangesetPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.create_if_not_exist != null) {
            message.create_if_not_exist = data.create_if_not_exist;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_id?: string;
            field_type?: FieldType;
            create_if_not_exist?: boolean;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.create_if_not_exist != null) {
            data.create_if_not_exist = this.create_if_not_exist;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (this.create_if_not_exist != false)
            writer.writeBool(4, this.create_if_not_exist);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditFieldChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditFieldChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                case 4:
                    message.create_if_not_exist = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EditFieldChangesetPB {
        return EditFieldChangesetPB.deserialize(bytes);
    }
}
export class TypeOptionPathPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        field_id?: string;
        field_type?: FieldType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, FieldType.RichText) as FieldType;
    }
    set field_type(value: FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        grid_id?: string;
        field_id?: string;
        field_type?: FieldType;
    }): TypeOptionPathPB {
        const message = new TypeOptionPathPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_id?: string;
            field_type?: FieldType;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypeOptionPathPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypeOptionPathPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TypeOptionPathPB {
        return TypeOptionPathPB.deserialize(bytes);
    }
}
export class TypeOptionPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        field?: FieldPB;
        type_option_data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field" in data && data.field != undefined) {
                this.field = data.field;
            }
            if ("type_option_data" in data && data.type_option_data != undefined) {
                this.type_option_data = data.type_option_data;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field() {
        return pb_1.Message.getWrapperField(this, FieldPB, 2) as FieldPB;
    }
    set field(value: FieldPB) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_field() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type_option_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set type_option_data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        grid_id?: string;
        field?: ReturnType<typeof FieldPB.prototype.toObject>;
        type_option_data?: Uint8Array;
    }): TypeOptionPB {
        const message = new TypeOptionPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field != null) {
            message.field = FieldPB.fromObject(data.field);
        }
        if (data.type_option_data != null) {
            message.type_option_data = data.type_option_data;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field?: ReturnType<typeof FieldPB.prototype.toObject>;
            type_option_data?: Uint8Array;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field != null) {
            data.field = this.field.toObject();
        }
        if (this.type_option_data != null) {
            data.type_option_data = this.type_option_data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.has_field)
            writer.writeMessage(2, this.field, () => this.field.serialize(writer));
        if (this.type_option_data.length)
            writer.writeBytes(3, this.type_option_data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypeOptionPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypeOptionPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.field, () => message.field = FieldPB.deserialize(reader));
                    break;
                case 3:
                    message.type_option_data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TypeOptionPB {
        return TypeOptionPB.deserialize(bytes);
    }
}
export class RepeatedFieldPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: FieldPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, FieldPB, 1) as FieldPB[];
    }
    set items(value: FieldPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof FieldPB.prototype.toObject>[];
    }): RepeatedFieldPB {
        const message = new RepeatedFieldPB({});
        if (data.items != null) {
            message.items = data.items.map(item => FieldPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof FieldPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: FieldPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: FieldPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedFieldPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedFieldPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FieldPB.deserialize(reader), FieldPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedFieldPB {
        return RepeatedFieldPB.deserialize(bytes);
    }
}
export class RepeatedFieldIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: FieldIdPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, FieldIdPB, 1) as FieldIdPB[];
    }
    set items(value: FieldIdPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof FieldIdPB.prototype.toObject>[];
    }): RepeatedFieldIdPB {
        const message = new RepeatedFieldIdPB({});
        if (data.items != null) {
            message.items = data.items.map(item => FieldIdPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof FieldIdPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: FieldIdPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: FieldIdPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedFieldIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedFieldIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FieldIdPB.deserialize(reader), FieldIdPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedFieldIdPB {
        return RepeatedFieldIdPB.deserialize(bytes);
    }
}
export class TypeOptionChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        field_id?: string;
        type_option_data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("type_option_data" in data && data.type_option_data != undefined) {
                this.type_option_data = data.type_option_data;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get type_option_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set type_option_data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        grid_id?: string;
        field_id?: string;
        type_option_data?: Uint8Array;
    }): TypeOptionChangesetPB {
        const message = new TypeOptionChangesetPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.type_option_data != null) {
            message.type_option_data = data.type_option_data;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_id?: string;
            type_option_data?: Uint8Array;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.type_option_data != null) {
            data.type_option_data = this.type_option_data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.type_option_data.length)
            writer.writeBytes(3, this.type_option_data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypeOptionChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypeOptionChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.type_option_data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TypeOptionChangesetPB {
        return TypeOptionChangesetPB.deserialize(bytes);
    }
}
export class GetFieldPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        grid_id?: string;
    } & (({
        field_ids?: RepeatedFieldIdPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_ids" in data && data.field_ids != undefined) {
                this.field_ids = data.field_ids;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_ids() {
        return pb_1.Message.getWrapperField(this, RepeatedFieldIdPB, 2) as RepeatedFieldIdPB;
    }
    set field_ids(value: RepeatedFieldIdPB) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_field_ids() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_field_ids() {
        const cases: {
            [index: number]: "none" | "field_ids";
        } = {
            0: "none",
            2: "field_ids"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        grid_id?: string;
        field_ids?: ReturnType<typeof RepeatedFieldIdPB.prototype.toObject>;
    }): GetFieldPayloadPB {
        const message = new GetFieldPayloadPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_ids != null) {
            message.field_ids = RepeatedFieldIdPB.fromObject(data.field_ids);
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_ids?: ReturnType<typeof RepeatedFieldIdPB.prototype.toObject>;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_ids != null) {
            data.field_ids = this.field_ids.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.has_field_ids)
            writer.writeMessage(2, this.field_ids, () => this.field_ids.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFieldPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFieldPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.field_ids, () => message.field_ids = RepeatedFieldIdPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetFieldPayloadPB {
        return GetFieldPayloadPB.deserialize(bytes);
    }
}
export class FieldChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4], [5], [6], [7], [8]];
    constructor(data?: any[] | ({
        field_id?: string;
        grid_id?: string;
    } & (({
        name?: string;
    }) | ({
        desc?: string;
    }) | ({
        field_type?: FieldType;
    }) | ({
        frozen?: boolean;
    }) | ({
        visibility?: boolean;
    }) | ({
        width?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("frozen" in data && data.frozen != undefined) {
                this.frozen = data.frozen;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
    }
    get has_desc() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 5, FieldType.RichText) as FieldType;
    }
    set field_type(value: FieldType) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
    }
    get has_field_type() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get frozen() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set frozen(value: boolean) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
    }
    get has_frozen() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set visibility(value: boolean) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
    }
    get has_visibility() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[5], value);
    }
    get has_width() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            3: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_desc() {
        const cases: {
            [index: number]: "none" | "desc";
        } = {
            0: "none",
            4: "desc"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_field_type() {
        const cases: {
            [index: number]: "none" | "field_type";
        } = {
            0: "none",
            5: "field_type"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get one_of_frozen() {
        const cases: {
            [index: number]: "none" | "frozen";
        } = {
            0: "none",
            6: "frozen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get one_of_visibility() {
        const cases: {
            [index: number]: "none" | "visibility";
        } = {
            0: "none",
            7: "visibility"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get one_of_width() {
        const cases: {
            [index: number]: "none" | "width";
        } = {
            0: "none",
            8: "width"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        field_id?: string;
        grid_id?: string;
        name?: string;
        desc?: string;
        field_type?: FieldType;
        frozen?: boolean;
        visibility?: boolean;
        width?: number;
    }): FieldChangesetPB {
        const message = new FieldChangesetPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.frozen != null) {
            message.frozen = data.frozen;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            grid_id?: string;
            name?: string;
            desc?: string;
            field_type?: FieldType;
            frozen?: boolean;
            visibility?: boolean;
            width?: number;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.frozen != null) {
            data.frozen = this.frozen;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        if (this.width != null) {
            data.width = this.width;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.grid_id.length)
            writer.writeString(2, this.grid_id);
        if (this.has_name)
            writer.writeString(3, this.name);
        if (this.has_desc)
            writer.writeString(4, this.desc);
        if (this.has_field_type)
            writer.writeEnum(5, this.field_type);
        if (this.has_frozen)
            writer.writeBool(6, this.frozen);
        if (this.has_visibility)
            writer.writeBool(7, this.visibility);
        if (this.has_width)
            writer.writeInt32(8, this.width);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.grid_id = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.desc = reader.readString();
                    break;
                case 5:
                    message.field_type = reader.readEnum();
                    break;
                case 6:
                    message.frozen = reader.readBool();
                    break;
                case 7:
                    message.visibility = reader.readBool();
                    break;
                case 8:
                    message.width = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldChangesetPB {
        return FieldChangesetPB.deserialize(bytes);
    }
}
export class DuplicateFieldPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        grid_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        field_id?: string;
        grid_id?: string;
    }): DuplicateFieldPayloadPB {
        const message = new DuplicateFieldPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            grid_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.grid_id.length)
            writer.writeString(2, this.grid_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DuplicateFieldPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DuplicateFieldPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.grid_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DuplicateFieldPayloadPB {
        return DuplicateFieldPayloadPB.deserialize(bytes);
    }
}
export class GridFieldIdentifierPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        grid_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        field_id?: string;
        grid_id?: string;
    }): GridFieldIdentifierPayloadPB {
        const message = new GridFieldIdentifierPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            grid_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.grid_id.length)
            writer.writeString(2, this.grid_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridFieldIdentifierPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridFieldIdentifierPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.grid_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridFieldIdentifierPayloadPB {
        return GridFieldIdentifierPayloadPB.deserialize(bytes);
    }
}
export class DeleteFieldPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        grid_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        field_id?: string;
        grid_id?: string;
    }): DeleteFieldPayloadPB {
        const message = new DeleteFieldPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            grid_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.grid_id.length)
            writer.writeString(2, this.grid_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFieldPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFieldPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.grid_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteFieldPayloadPB {
        return DeleteFieldPayloadPB.deserialize(bytes);
    }
}
