/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: filter_changeset.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./util";
import * as pb_1 from "google-protobuf";
export class FilterChangesetNotificationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        insert_filters?: dependency_1.FilterPB[];
        delete_filters?: dependency_1.FilterPB[];
        update_filters?: UpdatedFilter[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("insert_filters" in data && data.insert_filters != undefined) {
                this.insert_filters = data.insert_filters;
            }
            if ("delete_filters" in data && data.delete_filters != undefined) {
                this.delete_filters = data.delete_filters;
            }
            if ("update_filters" in data && data.update_filters != undefined) {
                this.update_filters = data.update_filters;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get insert_filters() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.FilterPB, 2) as dependency_1.FilterPB[];
    }
    set insert_filters(value: dependency_1.FilterPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get delete_filters() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.FilterPB, 3) as dependency_1.FilterPB[];
    }
    set delete_filters(value: dependency_1.FilterPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get update_filters() {
        return pb_1.Message.getRepeatedWrapperField(this, UpdatedFilter, 4) as UpdatedFilter[];
    }
    set update_filters(value: UpdatedFilter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        view_id?: string;
        insert_filters?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>[];
        delete_filters?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>[];
        update_filters?: ReturnType<typeof UpdatedFilter.prototype.toObject>[];
    }): FilterChangesetNotificationPB {
        const message = new FilterChangesetNotificationPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.insert_filters != null) {
            message.insert_filters = data.insert_filters.map(item => dependency_1.FilterPB.fromObject(item));
        }
        if (data.delete_filters != null) {
            message.delete_filters = data.delete_filters.map(item => dependency_1.FilterPB.fromObject(item));
        }
        if (data.update_filters != null) {
            message.update_filters = data.update_filters.map(item => UpdatedFilter.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            insert_filters?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>[];
            delete_filters?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>[];
            update_filters?: ReturnType<typeof UpdatedFilter.prototype.toObject>[];
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.insert_filters != null) {
            data.insert_filters = this.insert_filters.map((item: dependency_1.FilterPB) => item.toObject());
        }
        if (this.delete_filters != null) {
            data.delete_filters = this.delete_filters.map((item: dependency_1.FilterPB) => item.toObject());
        }
        if (this.update_filters != null) {
            data.update_filters = this.update_filters.map((item: UpdatedFilter) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.insert_filters.length)
            writer.writeRepeatedMessage(2, this.insert_filters, (item: dependency_1.FilterPB) => item.serialize(writer));
        if (this.delete_filters.length)
            writer.writeRepeatedMessage(3, this.delete_filters, (item: dependency_1.FilterPB) => item.serialize(writer));
        if (this.update_filters.length)
            writer.writeRepeatedMessage(4, this.update_filters, (item: UpdatedFilter) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterChangesetNotificationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterChangesetNotificationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.insert_filters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.FilterPB.deserialize(reader), dependency_1.FilterPB));
                    break;
                case 3:
                    reader.readMessage(message.delete_filters, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.FilterPB.deserialize(reader), dependency_1.FilterPB));
                    break;
                case 4:
                    reader.readMessage(message.update_filters, () => pb_1.Message.addToRepeatedWrapperField(message, 4, UpdatedFilter.deserialize(reader), UpdatedFilter));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FilterChangesetNotificationPB {
        return FilterChangesetNotificationPB.deserialize(bytes);
    }
}
export class UpdatedFilter extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        filter_id?: string;
    } & (({
        filter?: dependency_1.FilterPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filter_id" in data && data.filter_id != undefined) {
                this.filter_id = data.filter_id;
            }
            if ("filter" in data && data.filter != undefined) {
                this.filter = data.filter;
            }
        }
    }
    get filter_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filter_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get filter() {
        return pb_1.Message.getWrapperField(this, dependency_1.FilterPB, 2) as dependency_1.FilterPB;
    }
    set filter(value: dependency_1.FilterPB) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_filter() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_filter() {
        const cases: {
            [index: number]: "none" | "filter";
        } = {
            0: "none",
            2: "filter"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        filter_id?: string;
        filter?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>;
    }): UpdatedFilter {
        const message = new UpdatedFilter({});
        if (data.filter_id != null) {
            message.filter_id = data.filter_id;
        }
        if (data.filter != null) {
            message.filter = dependency_1.FilterPB.fromObject(data.filter);
        }
        return message;
    }
    toObject() {
        const data: {
            filter_id?: string;
            filter?: ReturnType<typeof dependency_1.FilterPB.prototype.toObject>;
        } = {};
        if (this.filter_id != null) {
            data.filter_id = this.filter_id;
        }
        if (this.filter != null) {
            data.filter = this.filter.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filter_id.length)
            writer.writeString(1, this.filter_id);
        if (this.has_filter)
            writer.writeMessage(2, this.filter, () => this.filter.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatedFilter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatedFilter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filter_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.filter, () => message.filter = dependency_1.FilterPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatedFilter {
        return UpdatedFilter.deserialize(bytes);
    }
}
