/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: grid_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./field_entities";
import * as dependency_2 from "./row_entities";
import * as pb_1 from "google-protobuf";
export class GridPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        fields?: dependency_1.FieldIdPB[];
        rows?: dependency_2.RowPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("fields" in data && data.fields != undefined) {
                this.fields = data.fields;
            }
            if ("rows" in data && data.rows != undefined) {
                this.rows = data.rows;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get fields() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.FieldIdPB, 2) as dependency_1.FieldIdPB[];
    }
    set fields(value: dependency_1.FieldIdPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.RowPB, 3) as dependency_2.RowPB[];
    }
    set rows(value: dependency_2.RowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        fields?: ReturnType<typeof dependency_1.FieldIdPB.prototype.toObject>[];
        rows?: ReturnType<typeof dependency_2.RowPB.prototype.toObject>[];
    }): GridPB {
        const message = new GridPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.fields != null) {
            message.fields = data.fields.map(item => dependency_1.FieldIdPB.fromObject(item));
        }
        if (data.rows != null) {
            message.rows = data.rows.map(item => dependency_2.RowPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            fields?: ReturnType<typeof dependency_1.FieldIdPB.prototype.toObject>[];
            rows?: ReturnType<typeof dependency_2.RowPB.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.fields != null) {
            data.fields = this.fields.map((item: dependency_1.FieldIdPB) => item.toObject());
        }
        if (this.rows != null) {
            data.rows = this.rows.map((item: dependency_2.RowPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.fields.length)
            writer.writeRepeatedMessage(2, this.fields, (item: dependency_1.FieldIdPB) => item.serialize(writer));
        if (this.rows.length)
            writer.writeRepeatedMessage(3, this.rows, (item: dependency_2.RowPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.FieldIdPB.deserialize(reader), dependency_1.FieldIdPB));
                    break;
                case 3:
                    reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.RowPB.deserialize(reader), dependency_2.RowPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridPB {
        return GridPB.deserialize(bytes);
    }
}
export class CreateGridPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): CreateGridPayloadPB {
        const message = new CreateGridPayloadPB({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGridPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGridPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateGridPayloadPB {
        return CreateGridPayloadPB.deserialize(bytes);
    }
}
export class GridIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): GridIdPB {
        const message = new GridIdPB({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridIdPB {
        return GridIdPB.deserialize(bytes);
    }
}
export class GridBlockIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): GridBlockIdPB {
        const message = new GridBlockIdPB({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridBlockIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridBlockIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridBlockIdPB {
        return GridBlockIdPB.deserialize(bytes);
    }
}
export class MoveFieldPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        field_id?: string;
        from_index?: number;
        to_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("from_index" in data && data.from_index != undefined) {
                this.from_index = data.from_index;
            }
            if ("to_index" in data && data.to_index != undefined) {
                this.to_index = data.to_index;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get from_index() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set from_index(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get to_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set to_index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        grid_id?: string;
        field_id?: string;
        from_index?: number;
        to_index?: number;
    }): MoveFieldPayloadPB {
        const message = new MoveFieldPayloadPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.from_index != null) {
            message.from_index = data.from_index;
        }
        if (data.to_index != null) {
            message.to_index = data.to_index;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            field_id?: string;
            from_index?: number;
            to_index?: number;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.from_index != null) {
            data.from_index = this.from_index;
        }
        if (this.to_index != null) {
            data.to_index = this.to_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.from_index != 0)
            writer.writeInt32(3, this.from_index);
        if (this.to_index != 0)
            writer.writeInt32(4, this.to_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveFieldPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveFieldPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.from_index = reader.readInt32();
                    break;
                case 4:
                    message.to_index = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveFieldPayloadPB {
        return MoveFieldPayloadPB.deserialize(bytes);
    }
}
export class MoveRowPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        from_row_id?: string;
        to_row_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("from_row_id" in data && data.from_row_id != undefined) {
                this.from_row_id = data.from_row_id;
            }
            if ("to_row_id" in data && data.to_row_id != undefined) {
                this.to_row_id = data.to_row_id;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set from_row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get to_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set to_row_id(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        view_id?: string;
        from_row_id?: string;
        to_row_id?: string;
    }): MoveRowPayloadPB {
        const message = new MoveRowPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.from_row_id != null) {
            message.from_row_id = data.from_row_id;
        }
        if (data.to_row_id != null) {
            message.to_row_id = data.to_row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            from_row_id?: string;
            to_row_id?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.from_row_id != null) {
            data.from_row_id = this.from_row_id;
        }
        if (this.to_row_id != null) {
            data.to_row_id = this.to_row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.from_row_id.length)
            writer.writeString(2, this.from_row_id);
        if (this.to_row_id.length)
            writer.writeString(4, this.to_row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveRowPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveRowPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.from_row_id = reader.readString();
                    break;
                case 4:
                    message.to_row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveRowPayloadPB {
        return MoveRowPayloadPB.deserialize(bytes);
    }
}
export class MoveGroupRowPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        view_id?: string;
        from_row_id?: string;
        to_group_id?: string;
    } & (({
        to_row_id?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("from_row_id" in data && data.from_row_id != undefined) {
                this.from_row_id = data.from_row_id;
            }
            if ("to_group_id" in data && data.to_group_id != undefined) {
                this.to_group_id = data.to_group_id;
            }
            if ("to_row_id" in data && data.to_row_id != undefined) {
                this.to_row_id = data.to_row_id;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set from_row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get to_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set to_group_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get to_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set to_row_id(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_to_row_id() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get one_of_to_row_id() {
        const cases: {
            [index: number]: "none" | "to_row_id";
        } = {
            0: "none",
            4: "to_row_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        view_id?: string;
        from_row_id?: string;
        to_group_id?: string;
        to_row_id?: string;
    }): MoveGroupRowPayloadPB {
        const message = new MoveGroupRowPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.from_row_id != null) {
            message.from_row_id = data.from_row_id;
        }
        if (data.to_group_id != null) {
            message.to_group_id = data.to_group_id;
        }
        if (data.to_row_id != null) {
            message.to_row_id = data.to_row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            from_row_id?: string;
            to_group_id?: string;
            to_row_id?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.from_row_id != null) {
            data.from_row_id = this.from_row_id;
        }
        if (this.to_group_id != null) {
            data.to_group_id = this.to_group_id;
        }
        if (this.to_row_id != null) {
            data.to_row_id = this.to_row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.from_row_id.length)
            writer.writeString(2, this.from_row_id);
        if (this.to_group_id.length)
            writer.writeString(3, this.to_group_id);
        if (this.has_to_row_id)
            writer.writeString(4, this.to_row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveGroupRowPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveGroupRowPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.from_row_id = reader.readString();
                    break;
                case 3:
                    message.to_group_id = reader.readString();
                    break;
                case 4:
                    message.to_row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveGroupRowPayloadPB {
        return MoveGroupRowPayloadPB.deserialize(bytes);
    }
}
