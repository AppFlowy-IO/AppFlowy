/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: group.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./row_entities";
import * as dependency_2 from "./field_entities";
import * as pb_1 from "google-protobuf";
export class CreateBoardCardPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        grid_id?: string;
        group_id?: string;
    } & (({
        start_row_id?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("start_row_id" in data && data.start_row_id != undefined) {
                this.start_row_id = data.start_row_id;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get start_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set start_row_id(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_start_row_id() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get one_of_start_row_id() {
        const cases: {
            [index: number]: "none" | "start_row_id";
        } = {
            0: "none",
            3: "start_row_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        grid_id?: string;
        group_id?: string;
        start_row_id?: string;
    }): CreateBoardCardPayloadPB {
        const message = new CreateBoardCardPayloadPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.start_row_id != null) {
            message.start_row_id = data.start_row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            group_id?: string;
            start_row_id?: string;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.start_row_id != null) {
            data.start_row_id = this.start_row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.group_id.length)
            writer.writeString(2, this.group_id);
        if (this.has_start_row_id)
            writer.writeString(3, this.start_row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBoardCardPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBoardCardPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.group_id = reader.readString();
                    break;
                case 3:
                    message.start_row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateBoardCardPayloadPB {
        return CreateBoardCardPayloadPB.deserialize(bytes);
    }
}
export class GroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        field_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        field_id?: string;
    }): GroupConfigurationPB {
        const message = new GroupConfigurationPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            field_id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupConfigurationPB {
        return GroupConfigurationPB.deserialize(bytes);
    }
}
export class RepeatedGroupPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: GroupPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, GroupPB, 1) as GroupPB[];
    }
    set items(value: GroupPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof GroupPB.prototype.toObject>[];
    }): RepeatedGroupPB {
        const message = new RepeatedGroupPB({});
        if (data.items != null) {
            message.items = data.items.map(item => GroupPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof GroupPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: GroupPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: GroupPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedGroupPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedGroupPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GroupPB.deserialize(reader), GroupPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedGroupPB {
        return RepeatedGroupPB.deserialize(bytes);
    }
}
export class GroupPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        group_id?: string;
        desc?: string;
        rows?: dependency_1.RowPB[];
        is_default?: boolean;
        is_visible?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("rows" in data && data.rows != undefined) {
                this.rows = data.rows;
            }
            if ("is_default" in data && data.is_default != undefined) {
                this.is_default = data.is_default;
            }
            if ("is_visible" in data && data.is_visible != undefined) {
                this.is_visible = data.is_visible;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.RowPB, 4) as dependency_1.RowPB[];
    }
    set rows(value: dependency_1.RowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get is_default() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_default(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get is_visible() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set is_visible(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        field_id?: string;
        group_id?: string;
        desc?: string;
        rows?: ReturnType<typeof dependency_1.RowPB.prototype.toObject>[];
        is_default?: boolean;
        is_visible?: boolean;
    }): GroupPB {
        const message = new GroupPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.rows != null) {
            message.rows = data.rows.map(item => dependency_1.RowPB.fromObject(item));
        }
        if (data.is_default != null) {
            message.is_default = data.is_default;
        }
        if (data.is_visible != null) {
            message.is_visible = data.is_visible;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            group_id?: string;
            desc?: string;
            rows?: ReturnType<typeof dependency_1.RowPB.prototype.toObject>[];
            is_default?: boolean;
            is_visible?: boolean;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.rows != null) {
            data.rows = this.rows.map((item: dependency_1.RowPB) => item.toObject());
        }
        if (this.is_default != null) {
            data.is_default = this.is_default;
        }
        if (this.is_visible != null) {
            data.is_visible = this.is_visible;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.group_id.length)
            writer.writeString(2, this.group_id);
        if (this.desc.length)
            writer.writeString(3, this.desc);
        if (this.rows.length)
            writer.writeRepeatedMessage(4, this.rows, (item: dependency_1.RowPB) => item.serialize(writer));
        if (this.is_default != false)
            writer.writeBool(5, this.is_default);
        if (this.is_visible != false)
            writer.writeBool(6, this.is_visible);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.group_id = reader.readString();
                    break;
                case 3:
                    message.desc = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.RowPB.deserialize(reader), dependency_1.RowPB));
                    break;
                case 5:
                    message.is_default = reader.readBool();
                    break;
                case 6:
                    message.is_visible = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupPB {
        return GroupPB.deserialize(bytes);
    }
}
export class RepeatedGroupConfigurationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: GroupConfigurationPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, GroupConfigurationPB, 1) as GroupConfigurationPB[];
    }
    set items(value: GroupConfigurationPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof GroupConfigurationPB.prototype.toObject>[];
    }): RepeatedGroupConfigurationPB {
        const message = new RepeatedGroupConfigurationPB({});
        if (data.items != null) {
            message.items = data.items.map(item => GroupConfigurationPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof GroupConfigurationPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: GroupConfigurationPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: GroupConfigurationPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedGroupConfigurationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedGroupConfigurationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GroupConfigurationPB.deserialize(reader), GroupConfigurationPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedGroupConfigurationPB {
        return RepeatedGroupConfigurationPB.deserialize(bytes);
    }
}
export class InsertGroupPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        field_type?: dependency_2.FieldType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.FieldType.RichText) as dependency_2.FieldType;
    }
    set field_type(value: dependency_2.FieldType) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        field_id?: string;
        field_type?: dependency_2.FieldType;
    }): InsertGroupPayloadPB {
        const message = new InsertGroupPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            field_type?: dependency_2.FieldType;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.field_type != dependency_2.FieldType.RichText)
            writer.writeEnum(2, this.field_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertGroupPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertGroupPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.field_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InsertGroupPayloadPB {
        return InsertGroupPayloadPB.deserialize(bytes);
    }
}
export class DeleteGroupPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        group_id?: string;
        field_type?: dependency_2.FieldType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.FieldType.RichText) as dependency_2.FieldType;
    }
    set field_type(value: dependency_2.FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        field_id?: string;
        group_id?: string;
        field_type?: dependency_2.FieldType;
    }): DeleteGroupPayloadPB {
        const message = new DeleteGroupPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            group_id?: string;
            field_type?: dependency_2.FieldType;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.group_id.length)
            writer.writeString(2, this.group_id);
        if (this.field_type != dependency_2.FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteGroupPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteGroupPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.group_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteGroupPayloadPB {
        return DeleteGroupPayloadPB.deserialize(bytes);
    }
}
