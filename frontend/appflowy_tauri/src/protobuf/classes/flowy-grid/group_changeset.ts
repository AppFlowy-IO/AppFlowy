/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: group_changeset.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./row_entities";
import * as dependency_2 from "./group";
import * as pb_1 from "google-protobuf";
export class GroupRowsNotificationPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        group_id?: string;
        inserted_rows?: dependency_1.InsertedRowPB[];
        deleted_rows?: string[];
        updated_rows?: dependency_1.RowPB[];
    } & (({
        group_name?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("group_name" in data && data.group_name != undefined) {
                this.group_name = data.group_name;
            }
            if ("inserted_rows" in data && data.inserted_rows != undefined) {
                this.inserted_rows = data.inserted_rows;
            }
            if ("deleted_rows" in data && data.deleted_rows != undefined) {
                this.deleted_rows = data.deleted_rows;
            }
            if ("updated_rows" in data && data.updated_rows != undefined) {
                this.updated_rows = data.updated_rows;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set group_name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_group_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get inserted_rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InsertedRowPB, 3) as dependency_1.InsertedRowPB[];
    }
    set inserted_rows(value: dependency_1.InsertedRowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get deleted_rows() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set deleted_rows(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get updated_rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.RowPB, 5) as dependency_1.RowPB[];
    }
    set updated_rows(value: dependency_1.RowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get one_of_group_name() {
        const cases: {
            [index: number]: "none" | "group_name";
        } = {
            0: "none",
            2: "group_name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        group_id?: string;
        group_name?: string;
        inserted_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
        deleted_rows?: string[];
        updated_rows?: ReturnType<typeof dependency_1.RowPB.prototype.toObject>[];
    }): GroupRowsNotificationPB {
        const message = new GroupRowsNotificationPB({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.group_name != null) {
            message.group_name = data.group_name;
        }
        if (data.inserted_rows != null) {
            message.inserted_rows = data.inserted_rows.map(item => dependency_1.InsertedRowPB.fromObject(item));
        }
        if (data.deleted_rows != null) {
            message.deleted_rows = data.deleted_rows;
        }
        if (data.updated_rows != null) {
            message.updated_rows = data.updated_rows.map(item => dependency_1.RowPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
            group_name?: string;
            inserted_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
            deleted_rows?: string[];
            updated_rows?: ReturnType<typeof dependency_1.RowPB.prototype.toObject>[];
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.group_name != null) {
            data.group_name = this.group_name;
        }
        if (this.inserted_rows != null) {
            data.inserted_rows = this.inserted_rows.map((item: dependency_1.InsertedRowPB) => item.toObject());
        }
        if (this.deleted_rows != null) {
            data.deleted_rows = this.deleted_rows;
        }
        if (this.updated_rows != null) {
            data.updated_rows = this.updated_rows.map((item: dependency_1.RowPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (this.has_group_name)
            writer.writeString(2, this.group_name);
        if (this.inserted_rows.length)
            writer.writeRepeatedMessage(3, this.inserted_rows, (item: dependency_1.InsertedRowPB) => item.serialize(writer));
        if (this.deleted_rows.length)
            writer.writeRepeatedString(4, this.deleted_rows);
        if (this.updated_rows.length)
            writer.writeRepeatedMessage(5, this.updated_rows, (item: dependency_1.RowPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupRowsNotificationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupRowsNotificationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                case 2:
                    message.group_name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.inserted_rows, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.InsertedRowPB.deserialize(reader), dependency_1.InsertedRowPB));
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    reader.readMessage(message.updated_rows, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.RowPB.deserialize(reader), dependency_1.RowPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupRowsNotificationPB {
        return GroupRowsNotificationPB.deserialize(bytes);
    }
}
export class MoveGroupPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        from_group_id?: string;
        to_group_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("from_group_id" in data && data.from_group_id != undefined) {
                this.from_group_id = data.from_group_id;
            }
            if ("to_group_id" in data && data.to_group_id != undefined) {
                this.to_group_id = data.to_group_id;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set from_group_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get to_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set to_group_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        view_id?: string;
        from_group_id?: string;
        to_group_id?: string;
    }): MoveGroupPayloadPB {
        const message = new MoveGroupPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.from_group_id != null) {
            message.from_group_id = data.from_group_id;
        }
        if (data.to_group_id != null) {
            message.to_group_id = data.to_group_id;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            from_group_id?: string;
            to_group_id?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.from_group_id != null) {
            data.from_group_id = this.from_group_id;
        }
        if (this.to_group_id != null) {
            data.to_group_id = this.to_group_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.from_group_id.length)
            writer.writeString(2, this.from_group_id);
        if (this.to_group_id.length)
            writer.writeString(3, this.to_group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveGroupPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveGroupPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.from_group_id = reader.readString();
                    break;
                case 3:
                    message.to_group_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveGroupPayloadPB {
        return MoveGroupPayloadPB.deserialize(bytes);
    }
}
export class GroupViewChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        inserted_groups?: InsertedGroupPB[];
        new_groups?: dependency_2.GroupPB[];
        deleted_groups?: string[];
        update_groups?: dependency_2.GroupPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("inserted_groups" in data && data.inserted_groups != undefined) {
                this.inserted_groups = data.inserted_groups;
            }
            if ("new_groups" in data && data.new_groups != undefined) {
                this.new_groups = data.new_groups;
            }
            if ("deleted_groups" in data && data.deleted_groups != undefined) {
                this.deleted_groups = data.deleted_groups;
            }
            if ("update_groups" in data && data.update_groups != undefined) {
                this.update_groups = data.update_groups;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get inserted_groups() {
        return pb_1.Message.getRepeatedWrapperField(this, InsertedGroupPB, 2) as InsertedGroupPB[];
    }
    set inserted_groups(value: InsertedGroupPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get new_groups() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.GroupPB, 3) as dependency_2.GroupPB[];
    }
    set new_groups(value: dependency_2.GroupPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get deleted_groups() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set deleted_groups(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get update_groups() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.GroupPB, 5) as dependency_2.GroupPB[];
    }
    set update_groups(value: dependency_2.GroupPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        view_id?: string;
        inserted_groups?: ReturnType<typeof InsertedGroupPB.prototype.toObject>[];
        new_groups?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>[];
        deleted_groups?: string[];
        update_groups?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>[];
    }): GroupViewChangesetPB {
        const message = new GroupViewChangesetPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.inserted_groups != null) {
            message.inserted_groups = data.inserted_groups.map(item => InsertedGroupPB.fromObject(item));
        }
        if (data.new_groups != null) {
            message.new_groups = data.new_groups.map(item => dependency_2.GroupPB.fromObject(item));
        }
        if (data.deleted_groups != null) {
            message.deleted_groups = data.deleted_groups;
        }
        if (data.update_groups != null) {
            message.update_groups = data.update_groups.map(item => dependency_2.GroupPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            inserted_groups?: ReturnType<typeof InsertedGroupPB.prototype.toObject>[];
            new_groups?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>[];
            deleted_groups?: string[];
            update_groups?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>[];
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.inserted_groups != null) {
            data.inserted_groups = this.inserted_groups.map((item: InsertedGroupPB) => item.toObject());
        }
        if (this.new_groups != null) {
            data.new_groups = this.new_groups.map((item: dependency_2.GroupPB) => item.toObject());
        }
        if (this.deleted_groups != null) {
            data.deleted_groups = this.deleted_groups;
        }
        if (this.update_groups != null) {
            data.update_groups = this.update_groups.map((item: dependency_2.GroupPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.inserted_groups.length)
            writer.writeRepeatedMessage(2, this.inserted_groups, (item: InsertedGroupPB) => item.serialize(writer));
        if (this.new_groups.length)
            writer.writeRepeatedMessage(3, this.new_groups, (item: dependency_2.GroupPB) => item.serialize(writer));
        if (this.deleted_groups.length)
            writer.writeRepeatedString(4, this.deleted_groups);
        if (this.update_groups.length)
            writer.writeRepeatedMessage(5, this.update_groups, (item: dependency_2.GroupPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupViewChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupViewChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.inserted_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 2, InsertedGroupPB.deserialize(reader), InsertedGroupPB));
                    break;
                case 3:
                    reader.readMessage(message.new_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.GroupPB.deserialize(reader), dependency_2.GroupPB));
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    reader.readMessage(message.update_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.GroupPB.deserialize(reader), dependency_2.GroupPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupViewChangesetPB {
        return GroupViewChangesetPB.deserialize(bytes);
    }
}
export class InsertedGroupPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group?: dependency_2.GroupPB;
        index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group" in data && data.group != undefined) {
                this.group = data.group;
            }
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
        }
    }
    get group() {
        return pb_1.Message.getWrapperField(this, dependency_2.GroupPB, 1) as dependency_2.GroupPB;
    }
    set group(value: dependency_2.GroupPB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_group() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        group?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>;
        index?: number;
    }): InsertedGroupPB {
        const message = new InsertedGroupPB({});
        if (data.group != null) {
            message.group = dependency_2.GroupPB.fromObject(data.group);
        }
        if (data.index != null) {
            message.index = data.index;
        }
        return message;
    }
    toObject() {
        const data: {
            group?: ReturnType<typeof dependency_2.GroupPB.prototype.toObject>;
            index?: number;
        } = {};
        if (this.group != null) {
            data.group = this.group.toObject();
        }
        if (this.index != null) {
            data.index = this.index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_group)
            writer.writeMessage(1, this.group, () => this.group.serialize(writer));
        if (this.index != 0)
            writer.writeInt32(2, this.index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertedGroupPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertedGroupPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.group, () => message.group = dependency_2.GroupPB.deserialize(reader));
                    break;
                case 2:
                    message.index = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InsertedGroupPB {
        return InsertedGroupPB.deserialize(bytes);
    }
}
