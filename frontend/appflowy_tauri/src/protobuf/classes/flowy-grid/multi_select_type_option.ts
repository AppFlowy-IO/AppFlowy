/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: multi_select_type_option.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./select_type_option";
import * as pb_1 from "google-protobuf";
export class MultiSelectTypeOptionPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        options?: dependency_1.SelectOptionPB[];
        disable_color?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("options" in data && data.options != undefined) {
                this.options = data.options;
            }
            if ("disable_color" in data && data.disable_color != undefined) {
                this.disable_color = data.disable_color;
            }
        }
    }
    get options() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SelectOptionPB, 1) as dependency_1.SelectOptionPB[];
    }
    set options(value: dependency_1.SelectOptionPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get disable_color() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set disable_color(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        options?: ReturnType<typeof dependency_1.SelectOptionPB.prototype.toObject>[];
        disable_color?: boolean;
    }): MultiSelectTypeOptionPB {
        const message = new MultiSelectTypeOptionPB({});
        if (data.options != null) {
            message.options = data.options.map(item => dependency_1.SelectOptionPB.fromObject(item));
        }
        if (data.disable_color != null) {
            message.disable_color = data.disable_color;
        }
        return message;
    }
    toObject() {
        const data: {
            options?: ReturnType<typeof dependency_1.SelectOptionPB.prototype.toObject>[];
            disable_color?: boolean;
        } = {};
        if (this.options != null) {
            data.options = this.options.map((item: dependency_1.SelectOptionPB) => item.toObject());
        }
        if (this.disable_color != null) {
            data.disable_color = this.disable_color;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.options.length)
            writer.writeRepeatedMessage(1, this.options, (item: dependency_1.SelectOptionPB) => item.serialize(writer));
        if (this.disable_color != false)
            writer.writeBool(2, this.disable_color);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiSelectTypeOptionPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiSelectTypeOptionPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.SelectOptionPB.deserialize(reader), dependency_1.SelectOptionPB));
                    break;
                case 2:
                    message.disable_color = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MultiSelectTypeOptionPB {
        return MultiSelectTypeOptionPB.deserialize(bytes);
    }
}
