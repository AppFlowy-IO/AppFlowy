/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: number_type_option.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./format";
import * as pb_1 from "google-protobuf";
export class NumberTypeOptionPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        format?: dependency_1.NumberFormat;
        scale?: number;
        symbol?: string;
        sign_positive?: boolean;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("format" in data && data.format != undefined) {
                this.format = data.format;
            }
            if ("scale" in data && data.scale != undefined) {
                this.scale = data.scale;
            }
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("sign_positive" in data && data.sign_positive != undefined) {
                this.sign_positive = data.sign_positive;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get format() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.NumberFormat.Num) as dependency_1.NumberFormat;
    }
    set format(value: dependency_1.NumberFormat) {
        pb_1.Message.setField(this, 1, value);
    }
    get scale() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set scale(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get sign_positive() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set sign_positive(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        format?: dependency_1.NumberFormat;
        scale?: number;
        symbol?: string;
        sign_positive?: boolean;
        name?: string;
    }): NumberTypeOptionPB {
        const message = new NumberTypeOptionPB({});
        if (data.format != null) {
            message.format = data.format;
        }
        if (data.scale != null) {
            message.scale = data.scale;
        }
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.sign_positive != null) {
            message.sign_positive = data.sign_positive;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            format?: dependency_1.NumberFormat;
            scale?: number;
            symbol?: string;
            sign_positive?: boolean;
            name?: string;
        } = {};
        if (this.format != null) {
            data.format = this.format;
        }
        if (this.scale != null) {
            data.scale = this.scale;
        }
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.sign_positive != null) {
            data.sign_positive = this.sign_positive;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.format != dependency_1.NumberFormat.Num)
            writer.writeEnum(1, this.format);
        if (this.scale != 0)
            writer.writeUint32(2, this.scale);
        if (this.symbol.length)
            writer.writeString(3, this.symbol);
        if (this.sign_positive != false)
            writer.writeBool(4, this.sign_positive);
        if (this.name.length)
            writer.writeString(5, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NumberTypeOptionPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NumberTypeOptionPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.format = reader.readEnum();
                    break;
                case 2:
                    message.scale = reader.readUint32();
                    break;
                case 3:
                    message.symbol = reader.readString();
                    break;
                case 4:
                    message.sign_positive = reader.readBool();
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NumberTypeOptionPB {
        return NumberTypeOptionPB.deserialize(bytes);
    }
}
