/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: row_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class RowPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        block_id?: string;
        id?: string;
        height?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("block_id" in data && data.block_id != undefined) {
                this.block_id = data.block_id;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("height" in data && data.height != undefined) {
                this.height = data.height;
            }
        }
    }
    get block_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set block_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get height() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set height(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        block_id?: string;
        id?: string;
        height?: number;
    }): RowPB {
        const message = new RowPB({});
        if (data.block_id != null) {
            message.block_id = data.block_id;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.height != null) {
            message.height = data.height;
        }
        return message;
    }
    toObject() {
        const data: {
            block_id?: string;
            id?: string;
            height?: number;
        } = {};
        if (this.block_id != null) {
            data.block_id = this.block_id;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.height != null) {
            data.height = this.height;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.block_id.length)
            writer.writeString(1, this.block_id);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (this.height != 0)
            writer.writeInt32(3, this.height);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.block_id = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                case 3:
                    message.height = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RowPB {
        return RowPB.deserialize(bytes);
    }
}
export class OptionalRowPB extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        row?: RowPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("row" in data && data.row != undefined) {
                this.row = data.row;
            }
        }
    }
    get row() {
        return pb_1.Message.getWrapperField(this, RowPB, 1) as RowPB;
    }
    set row(value: RowPB) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_row() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get one_of_row() {
        const cases: {
            [index: number]: "none" | "row";
        } = {
            0: "none",
            1: "row"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        row?: ReturnType<typeof RowPB.prototype.toObject>;
    }): OptionalRowPB {
        const message = new OptionalRowPB({});
        if (data.row != null) {
            message.row = RowPB.fromObject(data.row);
        }
        return message;
    }
    toObject() {
        const data: {
            row?: ReturnType<typeof RowPB.prototype.toObject>;
        } = {};
        if (this.row != null) {
            data.row = this.row.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_row)
            writer.writeMessage(1, this.row, () => this.row.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalRowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalRowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.row, () => message.row = RowPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionalRowPB {
        return OptionalRowPB.deserialize(bytes);
    }
}
export class RepeatedRowPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: RowPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, RowPB, 1) as RowPB[];
    }
    set items(value: RowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof RowPB.prototype.toObject>[];
    }): RepeatedRowPB {
        const message = new RepeatedRowPB({});
        if (data.items != null) {
            message.items = data.items.map(item => RowPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof RowPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: RowPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: RowPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedRowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedRowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RowPB.deserialize(reader), RowPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedRowPB {
        return RepeatedRowPB.deserialize(bytes);
    }
}
export class InsertedRowPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        row?: RowPB;
        is_new?: boolean;
    } & (({
        index?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("row" in data && data.row != undefined) {
                this.row = data.row;
            }
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
            if ("is_new" in data && data.is_new != undefined) {
                this.is_new = data.is_new;
            }
        }
    }
    get row() {
        return pb_1.Message.getWrapperField(this, RowPB, 1) as RowPB;
    }
    set row(value: RowPB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_row() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_index() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get is_new() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_new(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get one_of_index() {
        const cases: {
            [index: number]: "none" | "index";
        } = {
            0: "none",
            2: "index"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        row?: ReturnType<typeof RowPB.prototype.toObject>;
        index?: number;
        is_new?: boolean;
    }): InsertedRowPB {
        const message = new InsertedRowPB({});
        if (data.row != null) {
            message.row = RowPB.fromObject(data.row);
        }
        if (data.index != null) {
            message.index = data.index;
        }
        if (data.is_new != null) {
            message.is_new = data.is_new;
        }
        return message;
    }
    toObject() {
        const data: {
            row?: ReturnType<typeof RowPB.prototype.toObject>;
            index?: number;
            is_new?: boolean;
        } = {};
        if (this.row != null) {
            data.row = this.row.toObject();
        }
        if (this.index != null) {
            data.index = this.index;
        }
        if (this.is_new != null) {
            data.is_new = this.is_new;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_row)
            writer.writeMessage(1, this.row, () => this.row.serialize(writer));
        if (this.has_index)
            writer.writeInt32(2, this.index);
        if (this.is_new != false)
            writer.writeBool(3, this.is_new);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertedRowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertedRowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.row, () => message.row = RowPB.deserialize(reader));
                    break;
                case 2:
                    message.index = reader.readInt32();
                    break;
                case 3:
                    message.is_new = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InsertedRowPB {
        return InsertedRowPB.deserialize(bytes);
    }
}
export class UpdatedRowPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        row?: RowPB;
        field_ids?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("row" in data && data.row != undefined) {
                this.row = data.row;
            }
            if ("field_ids" in data && data.field_ids != undefined) {
                this.field_ids = data.field_ids;
            }
        }
    }
    get row() {
        return pb_1.Message.getWrapperField(this, RowPB, 1) as RowPB;
    }
    set row(value: RowPB) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_row() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get field_ids() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set field_ids(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        row?: ReturnType<typeof RowPB.prototype.toObject>;
        field_ids?: string[];
    }): UpdatedRowPB {
        const message = new UpdatedRowPB({});
        if (data.row != null) {
            message.row = RowPB.fromObject(data.row);
        }
        if (data.field_ids != null) {
            message.field_ids = data.field_ids;
        }
        return message;
    }
    toObject() {
        const data: {
            row?: ReturnType<typeof RowPB.prototype.toObject>;
            field_ids?: string[];
        } = {};
        if (this.row != null) {
            data.row = this.row.toObject();
        }
        if (this.field_ids != null) {
            data.field_ids = this.field_ids;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_row)
            writer.writeMessage(1, this.row, () => this.row.serialize(writer));
        if (this.field_ids.length)
            writer.writeRepeatedString(2, this.field_ids);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatedRowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatedRowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.row, () => message.row = RowPB.deserialize(reader));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatedRowPB {
        return UpdatedRowPB.deserialize(bytes);
    }
}
export class RowIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        grid_id?: string;
        row_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        grid_id?: string;
        row_id?: string;
    }): RowIdPB {
        const message = new RowIdPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            row_id?: string;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.row_id.length)
            writer.writeString(2, this.row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RowIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RowIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RowIdPB {
        return RowIdPB.deserialize(bytes);
    }
}
export class BlockRowIdPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        block_id?: string;
        row_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("block_id" in data && data.block_id != undefined) {
                this.block_id = data.block_id;
            }
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
        }
    }
    get block_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set block_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        block_id?: string;
        row_id?: string;
    }): BlockRowIdPB {
        const message = new BlockRowIdPB({});
        if (data.block_id != null) {
            message.block_id = data.block_id;
        }
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            block_id?: string;
            row_id?: string;
        } = {};
        if (this.block_id != null) {
            data.block_id = this.block_id;
        }
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.block_id.length)
            writer.writeString(1, this.block_id);
        if (this.row_id.length)
            writer.writeString(2, this.row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRowIdPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRowIdPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.block_id = reader.readString();
                    break;
                case 2:
                    message.row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BlockRowIdPB {
        return BlockRowIdPB.deserialize(bytes);
    }
}
export class CreateTableRowPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        grid_id?: string;
    } & (({
        start_row_id?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("start_row_id" in data && data.start_row_id != undefined) {
                this.start_row_id = data.start_row_id;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get start_row_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set start_row_id(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_start_row_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get one_of_start_row_id() {
        const cases: {
            [index: number]: "none" | "start_row_id";
        } = {
            0: "none",
            2: "start_row_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        grid_id?: string;
        start_row_id?: string;
    }): CreateTableRowPayloadPB {
        const message = new CreateTableRowPayloadPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.start_row_id != null) {
            message.start_row_id = data.start_row_id;
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            start_row_id?: string;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.start_row_id != null) {
            data.start_row_id = this.start_row_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.has_start_row_id)
            writer.writeString(2, this.start_row_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTableRowPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTableRowPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.start_row_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateTableRowPayloadPB {
        return CreateTableRowPayloadPB.deserialize(bytes);
    }
}
