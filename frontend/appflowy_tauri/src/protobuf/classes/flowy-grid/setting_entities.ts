/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: setting_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./sort_entities";
import * as dependency_2 from "./group";
import * as dependency_3 from "./util";
import * as pb_1 from "google-protobuf";
export enum GridLayout {
    Table = 0,
    Board = 1,
    Calendar = 2
}
export class GridSettingPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        layouts?: GridLayoutPB[];
        layout_type?: GridLayout;
        filters?: dependency_3.RepeatedFilterPB;
        group_configurations?: dependency_2.RepeatedGroupConfigurationPB;
        sorts?: dependency_1.RepeatedSortPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("layouts" in data && data.layouts != undefined) {
                this.layouts = data.layouts;
            }
            if ("layout_type" in data && data.layout_type != undefined) {
                this.layout_type = data.layout_type;
            }
            if ("filters" in data && data.filters != undefined) {
                this.filters = data.filters;
            }
            if ("group_configurations" in data && data.group_configurations != undefined) {
                this.group_configurations = data.group_configurations;
            }
            if ("sorts" in data && data.sorts != undefined) {
                this.sorts = data.sorts;
            }
        }
    }
    get layouts() {
        return pb_1.Message.getRepeatedWrapperField(this, GridLayoutPB, 1) as GridLayoutPB[];
    }
    set layouts(value: GridLayoutPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get layout_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, GridLayout.Table) as GridLayout;
    }
    set layout_type(value: GridLayout) {
        pb_1.Message.setField(this, 2, value);
    }
    get filters() {
        return pb_1.Message.getWrapperField(this, dependency_3.RepeatedFilterPB, 3) as dependency_3.RepeatedFilterPB;
    }
    set filters(value: dependency_3.RepeatedFilterPB) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_filters() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get group_configurations() {
        return pb_1.Message.getWrapperField(this, dependency_2.RepeatedGroupConfigurationPB, 4) as dependency_2.RepeatedGroupConfigurationPB;
    }
    set group_configurations(value: dependency_2.RepeatedGroupConfigurationPB) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_group_configurations() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get sorts() {
        return pb_1.Message.getWrapperField(this, dependency_1.RepeatedSortPB, 5) as dependency_1.RepeatedSortPB;
    }
    set sorts(value: dependency_1.RepeatedSortPB) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_sorts() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        layouts?: ReturnType<typeof GridLayoutPB.prototype.toObject>[];
        layout_type?: GridLayout;
        filters?: ReturnType<typeof dependency_3.RepeatedFilterPB.prototype.toObject>;
        group_configurations?: ReturnType<typeof dependency_2.RepeatedGroupConfigurationPB.prototype.toObject>;
        sorts?: ReturnType<typeof dependency_1.RepeatedSortPB.prototype.toObject>;
    }): GridSettingPB {
        const message = new GridSettingPB({});
        if (data.layouts != null) {
            message.layouts = data.layouts.map(item => GridLayoutPB.fromObject(item));
        }
        if (data.layout_type != null) {
            message.layout_type = data.layout_type;
        }
        if (data.filters != null) {
            message.filters = dependency_3.RepeatedFilterPB.fromObject(data.filters);
        }
        if (data.group_configurations != null) {
            message.group_configurations = dependency_2.RepeatedGroupConfigurationPB.fromObject(data.group_configurations);
        }
        if (data.sorts != null) {
            message.sorts = dependency_1.RepeatedSortPB.fromObject(data.sorts);
        }
        return message;
    }
    toObject() {
        const data: {
            layouts?: ReturnType<typeof GridLayoutPB.prototype.toObject>[];
            layout_type?: GridLayout;
            filters?: ReturnType<typeof dependency_3.RepeatedFilterPB.prototype.toObject>;
            group_configurations?: ReturnType<typeof dependency_2.RepeatedGroupConfigurationPB.prototype.toObject>;
            sorts?: ReturnType<typeof dependency_1.RepeatedSortPB.prototype.toObject>;
        } = {};
        if (this.layouts != null) {
            data.layouts = this.layouts.map((item: GridLayoutPB) => item.toObject());
        }
        if (this.layout_type != null) {
            data.layout_type = this.layout_type;
        }
        if (this.filters != null) {
            data.filters = this.filters.toObject();
        }
        if (this.group_configurations != null) {
            data.group_configurations = this.group_configurations.toObject();
        }
        if (this.sorts != null) {
            data.sorts = this.sorts.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.layouts.length)
            writer.writeRepeatedMessage(1, this.layouts, (item: GridLayoutPB) => item.serialize(writer));
        if (this.layout_type != GridLayout.Table)
            writer.writeEnum(2, this.layout_type);
        if (this.has_filters)
            writer.writeMessage(3, this.filters, () => this.filters.serialize(writer));
        if (this.has_group_configurations)
            writer.writeMessage(4, this.group_configurations, () => this.group_configurations.serialize(writer));
        if (this.has_sorts)
            writer.writeMessage(5, this.sorts, () => this.sorts.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridSettingPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridSettingPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.layouts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GridLayoutPB.deserialize(reader), GridLayoutPB));
                    break;
                case 2:
                    message.layout_type = reader.readEnum();
                    break;
                case 3:
                    reader.readMessage(message.filters, () => message.filters = dependency_3.RepeatedFilterPB.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.group_configurations, () => message.group_configurations = dependency_2.RepeatedGroupConfigurationPB.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.sorts, () => message.sorts = dependency_1.RepeatedSortPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridSettingPB {
        return GridSettingPB.deserialize(bytes);
    }
}
export class GridLayoutPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ty?: GridLayout;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ty" in data && data.ty != undefined) {
                this.ty = data.ty;
            }
        }
    }
    get ty() {
        return pb_1.Message.getFieldWithDefault(this, 1, GridLayout.Table) as GridLayout;
    }
    set ty(value: GridLayout) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ty?: GridLayout;
    }): GridLayoutPB {
        const message = new GridLayoutPB({});
        if (data.ty != null) {
            message.ty = data.ty;
        }
        return message;
    }
    toObject() {
        const data: {
            ty?: GridLayout;
        } = {};
        if (this.ty != null) {
            data.ty = this.ty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ty != GridLayout.Table)
            writer.writeEnum(1, this.ty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridLayoutPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridLayoutPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ty = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridLayoutPB {
        return GridLayoutPB.deserialize(bytes);
    }
}
export class GridSettingChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4], [5], [6], [7], [8]];
    constructor(data?: any[] | ({
        grid_id?: string;
        layout_type?: GridLayout;
    } & (({
        alter_filter?: dependency_3.AlterFilterPayloadPB;
    }) | ({
        delete_filter?: dependency_3.DeleteFilterPayloadPB;
    }) | ({
        insert_group?: dependency_2.InsertGroupPayloadPB;
    }) | ({
        delete_group?: dependency_2.DeleteGroupPayloadPB;
    }) | ({
        alter_sort?: dependency_1.AlterSortPayloadPB;
    }) | ({
        delete_sort?: dependency_1.DeleteSortPayloadPB;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("grid_id" in data && data.grid_id != undefined) {
                this.grid_id = data.grid_id;
            }
            if ("layout_type" in data && data.layout_type != undefined) {
                this.layout_type = data.layout_type;
            }
            if ("alter_filter" in data && data.alter_filter != undefined) {
                this.alter_filter = data.alter_filter;
            }
            if ("delete_filter" in data && data.delete_filter != undefined) {
                this.delete_filter = data.delete_filter;
            }
            if ("insert_group" in data && data.insert_group != undefined) {
                this.insert_group = data.insert_group;
            }
            if ("delete_group" in data && data.delete_group != undefined) {
                this.delete_group = data.delete_group;
            }
            if ("alter_sort" in data && data.alter_sort != undefined) {
                this.alter_sort = data.alter_sort;
            }
            if ("delete_sort" in data && data.delete_sort != undefined) {
                this.delete_sort = data.delete_sort;
            }
        }
    }
    get grid_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set grid_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get layout_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, GridLayout.Table) as GridLayout;
    }
    set layout_type(value: GridLayout) {
        pb_1.Message.setField(this, 2, value);
    }
    get alter_filter() {
        return pb_1.Message.getWrapperField(this, dependency_3.AlterFilterPayloadPB, 3) as dependency_3.AlterFilterPayloadPB;
    }
    set alter_filter(value: dependency_3.AlterFilterPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_alter_filter() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get delete_filter() {
        return pb_1.Message.getWrapperField(this, dependency_3.DeleteFilterPayloadPB, 4) as dependency_3.DeleteFilterPayloadPB;
    }
    set delete_filter(value: dependency_3.DeleteFilterPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
    }
    get has_delete_filter() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get insert_group() {
        return pb_1.Message.getWrapperField(this, dependency_2.InsertGroupPayloadPB, 5) as dependency_2.InsertGroupPayloadPB;
    }
    set insert_group(value: dependency_2.InsertGroupPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[2], value);
    }
    get has_insert_group() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get delete_group() {
        return pb_1.Message.getWrapperField(this, dependency_2.DeleteGroupPayloadPB, 6) as dependency_2.DeleteGroupPayloadPB;
    }
    set delete_group(value: dependency_2.DeleteGroupPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[3], value);
    }
    get has_delete_group() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get alter_sort() {
        return pb_1.Message.getWrapperField(this, dependency_1.AlterSortPayloadPB, 7) as dependency_1.AlterSortPayloadPB;
    }
    set alter_sort(value: dependency_1.AlterSortPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[4], value);
    }
    get has_alter_sort() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get delete_sort() {
        return pb_1.Message.getWrapperField(this, dependency_1.DeleteSortPayloadPB, 8) as dependency_1.DeleteSortPayloadPB;
    }
    set delete_sort(value: dependency_1.DeleteSortPayloadPB) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[5], value);
    }
    get has_delete_sort() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get one_of_alter_filter() {
        const cases: {
            [index: number]: "none" | "alter_filter";
        } = {
            0: "none",
            3: "alter_filter"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_delete_filter() {
        const cases: {
            [index: number]: "none" | "delete_filter";
        } = {
            0: "none",
            4: "delete_filter"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_insert_group() {
        const cases: {
            [index: number]: "none" | "insert_group";
        } = {
            0: "none",
            5: "insert_group"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get one_of_delete_group() {
        const cases: {
            [index: number]: "none" | "delete_group";
        } = {
            0: "none",
            6: "delete_group"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get one_of_alter_sort() {
        const cases: {
            [index: number]: "none" | "alter_sort";
        } = {
            0: "none",
            7: "alter_sort"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get one_of_delete_sort() {
        const cases: {
            [index: number]: "none" | "delete_sort";
        } = {
            0: "none",
            8: "delete_sort"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        grid_id?: string;
        layout_type?: GridLayout;
        alter_filter?: ReturnType<typeof dependency_3.AlterFilterPayloadPB.prototype.toObject>;
        delete_filter?: ReturnType<typeof dependency_3.DeleteFilterPayloadPB.prototype.toObject>;
        insert_group?: ReturnType<typeof dependency_2.InsertGroupPayloadPB.prototype.toObject>;
        delete_group?: ReturnType<typeof dependency_2.DeleteGroupPayloadPB.prototype.toObject>;
        alter_sort?: ReturnType<typeof dependency_1.AlterSortPayloadPB.prototype.toObject>;
        delete_sort?: ReturnType<typeof dependency_1.DeleteSortPayloadPB.prototype.toObject>;
    }): GridSettingChangesetPB {
        const message = new GridSettingChangesetPB({});
        if (data.grid_id != null) {
            message.grid_id = data.grid_id;
        }
        if (data.layout_type != null) {
            message.layout_type = data.layout_type;
        }
        if (data.alter_filter != null) {
            message.alter_filter = dependency_3.AlterFilterPayloadPB.fromObject(data.alter_filter);
        }
        if (data.delete_filter != null) {
            message.delete_filter = dependency_3.DeleteFilterPayloadPB.fromObject(data.delete_filter);
        }
        if (data.insert_group != null) {
            message.insert_group = dependency_2.InsertGroupPayloadPB.fromObject(data.insert_group);
        }
        if (data.delete_group != null) {
            message.delete_group = dependency_2.DeleteGroupPayloadPB.fromObject(data.delete_group);
        }
        if (data.alter_sort != null) {
            message.alter_sort = dependency_1.AlterSortPayloadPB.fromObject(data.alter_sort);
        }
        if (data.delete_sort != null) {
            message.delete_sort = dependency_1.DeleteSortPayloadPB.fromObject(data.delete_sort);
        }
        return message;
    }
    toObject() {
        const data: {
            grid_id?: string;
            layout_type?: GridLayout;
            alter_filter?: ReturnType<typeof dependency_3.AlterFilterPayloadPB.prototype.toObject>;
            delete_filter?: ReturnType<typeof dependency_3.DeleteFilterPayloadPB.prototype.toObject>;
            insert_group?: ReturnType<typeof dependency_2.InsertGroupPayloadPB.prototype.toObject>;
            delete_group?: ReturnType<typeof dependency_2.DeleteGroupPayloadPB.prototype.toObject>;
            alter_sort?: ReturnType<typeof dependency_1.AlterSortPayloadPB.prototype.toObject>;
            delete_sort?: ReturnType<typeof dependency_1.DeleteSortPayloadPB.prototype.toObject>;
        } = {};
        if (this.grid_id != null) {
            data.grid_id = this.grid_id;
        }
        if (this.layout_type != null) {
            data.layout_type = this.layout_type;
        }
        if (this.alter_filter != null) {
            data.alter_filter = this.alter_filter.toObject();
        }
        if (this.delete_filter != null) {
            data.delete_filter = this.delete_filter.toObject();
        }
        if (this.insert_group != null) {
            data.insert_group = this.insert_group.toObject();
        }
        if (this.delete_group != null) {
            data.delete_group = this.delete_group.toObject();
        }
        if (this.alter_sort != null) {
            data.alter_sort = this.alter_sort.toObject();
        }
        if (this.delete_sort != null) {
            data.delete_sort = this.delete_sort.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.grid_id.length)
            writer.writeString(1, this.grid_id);
        if (this.layout_type != GridLayout.Table)
            writer.writeEnum(2, this.layout_type);
        if (this.has_alter_filter)
            writer.writeMessage(3, this.alter_filter, () => this.alter_filter.serialize(writer));
        if (this.has_delete_filter)
            writer.writeMessage(4, this.delete_filter, () => this.delete_filter.serialize(writer));
        if (this.has_insert_group)
            writer.writeMessage(5, this.insert_group, () => this.insert_group.serialize(writer));
        if (this.has_delete_group)
            writer.writeMessage(6, this.delete_group, () => this.delete_group.serialize(writer));
        if (this.has_alter_sort)
            writer.writeMessage(7, this.alter_sort, () => this.alter_sort.serialize(writer));
        if (this.has_delete_sort)
            writer.writeMessage(8, this.delete_sort, () => this.delete_sort.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridSettingChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridSettingChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.grid_id = reader.readString();
                    break;
                case 2:
                    message.layout_type = reader.readEnum();
                    break;
                case 3:
                    reader.readMessage(message.alter_filter, () => message.alter_filter = dependency_3.AlterFilterPayloadPB.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.delete_filter, () => message.delete_filter = dependency_3.DeleteFilterPayloadPB.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.insert_group, () => message.insert_group = dependency_2.InsertGroupPayloadPB.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.delete_group, () => message.delete_group = dependency_2.DeleteGroupPayloadPB.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.alter_sort, () => message.alter_sort = dependency_1.AlterSortPayloadPB.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.delete_sort, () => message.delete_sort = dependency_1.DeleteSortPayloadPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridSettingChangesetPB {
        return GridSettingChangesetPB.deserialize(bytes);
    }
}
