/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: sort_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./field_entities";
import * as pb_1 from "google-protobuf";
export enum GridSortConditionPB {
    Ascending = 0,
    Descending = 1
}
export class SortPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        condition?: GridSortConditionPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("condition" in data && data.condition != undefined) {
                this.condition = data.condition;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get condition() {
        return pb_1.Message.getFieldWithDefault(this, 4, GridSortConditionPB.Ascending) as GridSortConditionPB;
    }
    set condition(value: GridSortConditionPB) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        condition?: GridSortConditionPB;
    }): SortPB {
        const message = new SortPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.condition != null) {
            message.condition = data.condition;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            field_id?: string;
            field_type?: dependency_1.FieldType;
            condition?: GridSortConditionPB;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.condition != null) {
            data.condition = this.condition;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (this.condition != GridSortConditionPB.Ascending)
            writer.writeEnum(4, this.condition);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                case 4:
                    message.condition = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SortPB {
        return SortPB.deserialize(bytes);
    }
}
export class RepeatedSortPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: SortPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, SortPB, 1) as SortPB[];
    }
    set items(value: SortPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof SortPB.prototype.toObject>[];
    }): RepeatedSortPB {
        const message = new RepeatedSortPB({});
        if (data.items != null) {
            message.items = data.items.map(item => SortPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof SortPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: SortPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: SortPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedSortPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedSortPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SortPB.deserialize(reader), SortPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedSortPB {
        return RepeatedSortPB.deserialize(bytes);
    }
}
export class AlterSortPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        view_id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        condition?: GridSortConditionPB;
    } & (({
        sort_id?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("sort_id" in data && data.sort_id != undefined) {
                this.sort_id = data.sort_id;
            }
            if ("condition" in data && data.condition != undefined) {
                this.condition = data.condition;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get sort_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sort_id(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_sort_id() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get condition() {
        return pb_1.Message.getFieldWithDefault(this, 5, GridSortConditionPB.Ascending) as GridSortConditionPB;
    }
    set condition(value: GridSortConditionPB) {
        pb_1.Message.setField(this, 5, value);
    }
    get one_of_sort_id() {
        const cases: {
            [index: number]: "none" | "sort_id";
        } = {
            0: "none",
            4: "sort_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        view_id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        sort_id?: string;
        condition?: GridSortConditionPB;
    }): AlterSortPayloadPB {
        const message = new AlterSortPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.sort_id != null) {
            message.sort_id = data.sort_id;
        }
        if (data.condition != null) {
            message.condition = data.condition;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            field_id?: string;
            field_type?: dependency_1.FieldType;
            sort_id?: string;
            condition?: GridSortConditionPB;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.sort_id != null) {
            data.sort_id = this.sort_id;
        }
        if (this.condition != null) {
            data.condition = this.condition;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (this.has_sort_id)
            writer.writeString(4, this.sort_id);
        if (this.condition != GridSortConditionPB.Ascending)
            writer.writeEnum(5, this.condition);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterSortPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterSortPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                case 4:
                    message.sort_id = reader.readString();
                    break;
                case 5:
                    message.condition = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AlterSortPayloadPB {
        return AlterSortPayloadPB.deserialize(bytes);
    }
}
export class DeleteSortPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        sort_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("sort_id" in data && data.sort_id != undefined) {
                this.sort_id = data.sort_id;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get sort_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sort_id(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        view_id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        sort_id?: string;
    }): DeleteSortPayloadPB {
        const message = new DeleteSortPayloadPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.sort_id != null) {
            message.sort_id = data.sort_id;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            field_id?: string;
            field_type?: dependency_1.FieldType;
            sort_id?: string;
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.sort_id != null) {
            data.sort_id = this.sort_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (this.sort_id.length)
            writer.writeString(4, this.sort_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSortPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSortPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                case 4:
                    message.sort_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteSortPayloadPB {
        return DeleteSortPayloadPB.deserialize(bytes);
    }
}
export class SortChangesetNotificationPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        insert_sorts?: SortPB[];
        delete_sorts?: SortPB[];
        update_sorts?: SortPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("insert_sorts" in data && data.insert_sorts != undefined) {
                this.insert_sorts = data.insert_sorts;
            }
            if ("delete_sorts" in data && data.delete_sorts != undefined) {
                this.delete_sorts = data.delete_sorts;
            }
            if ("update_sorts" in data && data.update_sorts != undefined) {
                this.update_sorts = data.update_sorts;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get insert_sorts() {
        return pb_1.Message.getRepeatedWrapperField(this, SortPB, 2) as SortPB[];
    }
    set insert_sorts(value: SortPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get delete_sorts() {
        return pb_1.Message.getRepeatedWrapperField(this, SortPB, 3) as SortPB[];
    }
    set delete_sorts(value: SortPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get update_sorts() {
        return pb_1.Message.getRepeatedWrapperField(this, SortPB, 4) as SortPB[];
    }
    set update_sorts(value: SortPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        view_id?: string;
        insert_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
        delete_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
        update_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
    }): SortChangesetNotificationPB {
        const message = new SortChangesetNotificationPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.insert_sorts != null) {
            message.insert_sorts = data.insert_sorts.map(item => SortPB.fromObject(item));
        }
        if (data.delete_sorts != null) {
            message.delete_sorts = data.delete_sorts.map(item => SortPB.fromObject(item));
        }
        if (data.update_sorts != null) {
            message.update_sorts = data.update_sorts.map(item => SortPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            insert_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
            delete_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
            update_sorts?: ReturnType<typeof SortPB.prototype.toObject>[];
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.insert_sorts != null) {
            data.insert_sorts = this.insert_sorts.map((item: SortPB) => item.toObject());
        }
        if (this.delete_sorts != null) {
            data.delete_sorts = this.delete_sorts.map((item: SortPB) => item.toObject());
        }
        if (this.update_sorts != null) {
            data.update_sorts = this.update_sorts.map((item: SortPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.insert_sorts.length)
            writer.writeRepeatedMessage(2, this.insert_sorts, (item: SortPB) => item.serialize(writer));
        if (this.delete_sorts.length)
            writer.writeRepeatedMessage(3, this.delete_sorts, (item: SortPB) => item.serialize(writer));
        if (this.update_sorts.length)
            writer.writeRepeatedMessage(4, this.update_sorts, (item: SortPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortChangesetNotificationPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortChangesetNotificationPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.insert_sorts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortPB.deserialize(reader), SortPB));
                    break;
                case 3:
                    reader.readMessage(message.delete_sorts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SortPB.deserialize(reader), SortPB));
                    break;
                case 4:
                    reader.readMessage(message.update_sorts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, SortPB.deserialize(reader), SortPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SortChangesetNotificationPB {
        return SortChangesetNotificationPB.deserialize(bytes);
    }
}
export class ReorderAllRowsPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        row_orders?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("row_orders" in data && data.row_orders != undefined) {
                this.row_orders = data.row_orders;
            }
        }
    }
    get row_orders() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set row_orders(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        row_orders?: string[];
    }): ReorderAllRowsPB {
        const message = new ReorderAllRowsPB({});
        if (data.row_orders != null) {
            message.row_orders = data.row_orders;
        }
        return message;
    }
    toObject() {
        const data: {
            row_orders?: string[];
        } = {};
        if (this.row_orders != null) {
            data.row_orders = this.row_orders;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.row_orders.length)
            writer.writeRepeatedString(1, this.row_orders);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReorderAllRowsPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReorderAllRowsPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReorderAllRowsPB {
        return ReorderAllRowsPB.deserialize(bytes);
    }
}
export class ReorderSingleRowPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        row_id?: string;
        old_index?: number;
        new_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("row_id" in data && data.row_id != undefined) {
                this.row_id = data.row_id;
            }
            if ("old_index" in data && data.old_index != undefined) {
                this.old_index = data.old_index;
            }
            if ("new_index" in data && data.new_index != undefined) {
                this.new_index = data.new_index;
            }
        }
    }
    get row_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set row_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get old_index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set old_index(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get new_index() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set new_index(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        row_id?: string;
        old_index?: number;
        new_index?: number;
    }): ReorderSingleRowPB {
        const message = new ReorderSingleRowPB({});
        if (data.row_id != null) {
            message.row_id = data.row_id;
        }
        if (data.old_index != null) {
            message.old_index = data.old_index;
        }
        if (data.new_index != null) {
            message.new_index = data.new_index;
        }
        return message;
    }
    toObject() {
        const data: {
            row_id?: string;
            old_index?: number;
            new_index?: number;
        } = {};
        if (this.row_id != null) {
            data.row_id = this.row_id;
        }
        if (this.old_index != null) {
            data.old_index = this.old_index;
        }
        if (this.new_index != null) {
            data.new_index = this.new_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.row_id.length)
            writer.writeString(1, this.row_id);
        if (this.old_index != 0)
            writer.writeInt32(2, this.old_index);
        if (this.new_index != 0)
            writer.writeInt32(3, this.new_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReorderSingleRowPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReorderSingleRowPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.row_id = reader.readString();
                    break;
                case 2:
                    message.old_index = reader.readInt32();
                    break;
                case 3:
                    message.new_index = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReorderSingleRowPB {
        return ReorderSingleRowPB.deserialize(bytes);
    }
}
