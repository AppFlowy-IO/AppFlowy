/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: util.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./field_entities";
import * as pb_1 from "google-protobuf";
export class FilterPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        field_id?: string;
        field_type?: dependency_1.FieldType;
        data?: Uint8Array;
    }): FilterPB {
        const message = new FilterPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            field_id?: string;
            field_type?: dependency_1.FieldType;
            data?: Uint8Array;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.field_id.length)
            writer.writeString(2, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(3, this.field_type);
        if (this.data.length)
            writer.writeBytes(4, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.field_id = reader.readString();
                    break;
                case 3:
                    message.field_type = reader.readEnum();
                    break;
                case 4:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FilterPB {
        return FilterPB.deserialize(bytes);
    }
}
export class RepeatedFilterPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        items?: FilterPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, FilterPB, 1) as FilterPB[];
    }
    set items(value: FilterPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        items?: ReturnType<typeof FilterPB.prototype.toObject>[];
    }): RepeatedFilterPB {
        const message = new RepeatedFilterPB({});
        if (data.items != null) {
            message.items = data.items.map(item => FilterPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof FilterPB.prototype.toObject>[];
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: FilterPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items.length)
            writer.writeRepeatedMessage(1, this.items, (item: FilterPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RepeatedFilterPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RepeatedFilterPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FilterPB.deserialize(reader), FilterPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RepeatedFilterPB {
        return RepeatedFilterPB.deserialize(bytes);
    }
}
export class DeleteFilterPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field_id?: string;
        field_type?: dependency_1.FieldType;
        filter_id?: string;
        view_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("filter_id" in data && data.filter_id != undefined) {
                this.filter_id = data.filter_id;
            }
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 2, value);
    }
    get filter_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set filter_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        field_id?: string;
        field_type?: dependency_1.FieldType;
        filter_id?: string;
        view_id?: string;
    }): DeleteFilterPayloadPB {
        const message = new DeleteFilterPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.filter_id != null) {
            message.filter_id = data.filter_id;
        }
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            field_type?: dependency_1.FieldType;
            filter_id?: string;
            view_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.filter_id != null) {
            data.filter_id = this.filter_id;
        }
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(2, this.field_type);
        if (this.filter_id.length)
            writer.writeString(3, this.filter_id);
        if (this.view_id.length)
            writer.writeString(4, this.view_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFilterPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFilterPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.field_type = reader.readEnum();
                    break;
                case 3:
                    message.filter_id = reader.readString();
                    break;
                case 4:
                    message.view_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteFilterPayloadPB {
        return DeleteFilterPayloadPB.deserialize(bytes);
    }
}
export class AlterFilterPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        field_id?: string;
        field_type?: dependency_1.FieldType;
        data?: Uint8Array;
        view_id?: string;
    } & (({
        filter_id?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field_id" in data && data.field_id != undefined) {
                this.field_id = data.field_id;
            }
            if ("field_type" in data && data.field_type != undefined) {
                this.field_type = data.field_type;
            }
            if ("filter_id" in data && data.filter_id != undefined) {
                this.filter_id = data.filter_id;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
        }
    }
    get field_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.FieldType.RichText) as dependency_1.FieldType;
    }
    set field_type(value: dependency_1.FieldType) {
        pb_1.Message.setField(this, 2, value);
    }
    get filter_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set filter_id(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_filter_id() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get one_of_filter_id() {
        const cases: {
            [index: number]: "none" | "filter_id";
        } = {
            0: "none",
            3: "filter_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        field_id?: string;
        field_type?: dependency_1.FieldType;
        filter_id?: string;
        data?: Uint8Array;
        view_id?: string;
    }): AlterFilterPayloadPB {
        const message = new AlterFilterPayloadPB({});
        if (data.field_id != null) {
            message.field_id = data.field_id;
        }
        if (data.field_type != null) {
            message.field_type = data.field_type;
        }
        if (data.filter_id != null) {
            message.filter_id = data.filter_id;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        return message;
    }
    toObject() {
        const data: {
            field_id?: string;
            field_type?: dependency_1.FieldType;
            filter_id?: string;
            data?: Uint8Array;
            view_id?: string;
        } = {};
        if (this.field_id != null) {
            data.field_id = this.field_id;
        }
        if (this.field_type != null) {
            data.field_type = this.field_type;
        }
        if (this.filter_id != null) {
            data.filter_id = this.filter_id;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field_id.length)
            writer.writeString(1, this.field_id);
        if (this.field_type != dependency_1.FieldType.RichText)
            writer.writeEnum(2, this.field_type);
        if (this.has_filter_id)
            writer.writeString(3, this.filter_id);
        if (this.data.length)
            writer.writeBytes(4, this.data);
        if (this.view_id.length)
            writer.writeString(5, this.view_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterFilterPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterFilterPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field_id = reader.readString();
                    break;
                case 2:
                    message.field_type = reader.readEnum();
                    break;
                case 3:
                    message.filter_id = reader.readString();
                    break;
                case 4:
                    message.data = reader.readBytes();
                    break;
                case 5:
                    message.view_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AlterFilterPayloadPB {
        return AlterFilterPayloadPB.deserialize(bytes);
    }
}
