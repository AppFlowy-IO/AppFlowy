/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: view_entities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./row_entities";
import * as pb_1 from "google-protobuf";
export class GridRowsVisibilityChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        visible_rows?: dependency_1.InsertedRowPB[];
        invisible_rows?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("visible_rows" in data && data.visible_rows != undefined) {
                this.visible_rows = data.visible_rows;
            }
            if ("invisible_rows" in data && data.invisible_rows != undefined) {
                this.invisible_rows = data.invisible_rows;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get visible_rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InsertedRowPB, 5) as dependency_1.InsertedRowPB[];
    }
    set visible_rows(value: dependency_1.InsertedRowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get invisible_rows() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
    }
    set invisible_rows(value: string[]) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        view_id?: string;
        visible_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
        invisible_rows?: string[];
    }): GridRowsVisibilityChangesetPB {
        const message = new GridRowsVisibilityChangesetPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.visible_rows != null) {
            message.visible_rows = data.visible_rows.map(item => dependency_1.InsertedRowPB.fromObject(item));
        }
        if (data.invisible_rows != null) {
            message.invisible_rows = data.invisible_rows;
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            visible_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
            invisible_rows?: string[];
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.visible_rows != null) {
            data.visible_rows = this.visible_rows.map((item: dependency_1.InsertedRowPB) => item.toObject());
        }
        if (this.invisible_rows != null) {
            data.invisible_rows = this.invisible_rows;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.visible_rows.length)
            writer.writeRepeatedMessage(5, this.visible_rows, (item: dependency_1.InsertedRowPB) => item.serialize(writer));
        if (this.invisible_rows.length)
            writer.writeRepeatedString(6, this.invisible_rows);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridRowsVisibilityChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridRowsVisibilityChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.visible_rows, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.InsertedRowPB.deserialize(reader), dependency_1.InsertedRowPB));
                    break;
                case 6:
                    pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridRowsVisibilityChangesetPB {
        return GridRowsVisibilityChangesetPB.deserialize(bytes);
    }
}
export class GridViewRowsChangesetPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        view_id?: string;
        inserted_rows?: dependency_1.InsertedRowPB[];
        deleted_rows?: string[];
        updated_rows?: dependency_1.UpdatedRowPB[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("view_id" in data && data.view_id != undefined) {
                this.view_id = data.view_id;
            }
            if ("inserted_rows" in data && data.inserted_rows != undefined) {
                this.inserted_rows = data.inserted_rows;
            }
            if ("deleted_rows" in data && data.deleted_rows != undefined) {
                this.deleted_rows = data.deleted_rows;
            }
            if ("updated_rows" in data && data.updated_rows != undefined) {
                this.updated_rows = data.updated_rows;
            }
        }
    }
    get view_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set view_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get inserted_rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InsertedRowPB, 2) as dependency_1.InsertedRowPB[];
    }
    set inserted_rows(value: dependency_1.InsertedRowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get deleted_rows() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set deleted_rows(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get updated_rows() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.UpdatedRowPB, 4) as dependency_1.UpdatedRowPB[];
    }
    set updated_rows(value: dependency_1.UpdatedRowPB[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        view_id?: string;
        inserted_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
        deleted_rows?: string[];
        updated_rows?: ReturnType<typeof dependency_1.UpdatedRowPB.prototype.toObject>[];
    }): GridViewRowsChangesetPB {
        const message = new GridViewRowsChangesetPB({});
        if (data.view_id != null) {
            message.view_id = data.view_id;
        }
        if (data.inserted_rows != null) {
            message.inserted_rows = data.inserted_rows.map(item => dependency_1.InsertedRowPB.fromObject(item));
        }
        if (data.deleted_rows != null) {
            message.deleted_rows = data.deleted_rows;
        }
        if (data.updated_rows != null) {
            message.updated_rows = data.updated_rows.map(item => dependency_1.UpdatedRowPB.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            view_id?: string;
            inserted_rows?: ReturnType<typeof dependency_1.InsertedRowPB.prototype.toObject>[];
            deleted_rows?: string[];
            updated_rows?: ReturnType<typeof dependency_1.UpdatedRowPB.prototype.toObject>[];
        } = {};
        if (this.view_id != null) {
            data.view_id = this.view_id;
        }
        if (this.inserted_rows != null) {
            data.inserted_rows = this.inserted_rows.map((item: dependency_1.InsertedRowPB) => item.toObject());
        }
        if (this.deleted_rows != null) {
            data.deleted_rows = this.deleted_rows;
        }
        if (this.updated_rows != null) {
            data.updated_rows = this.updated_rows.map((item: dependency_1.UpdatedRowPB) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.view_id.length)
            writer.writeString(1, this.view_id);
        if (this.inserted_rows.length)
            writer.writeRepeatedMessage(2, this.inserted_rows, (item: dependency_1.InsertedRowPB) => item.serialize(writer));
        if (this.deleted_rows.length)
            writer.writeRepeatedString(3, this.deleted_rows);
        if (this.updated_rows.length)
            writer.writeRepeatedMessage(4, this.updated_rows, (item: dependency_1.UpdatedRowPB) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GridViewRowsChangesetPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GridViewRowsChangesetPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.view_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.inserted_rows, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.InsertedRowPB.deserialize(reader), dependency_1.InsertedRowPB));
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    reader.readMessage(message.updated_rows, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.UpdatedRowPB.deserialize(reader), dependency_1.UpdatedRowPB));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GridViewRowsChangesetPB {
        return GridViewRowsChangesetPB.deserialize(bytes);
    }
}
