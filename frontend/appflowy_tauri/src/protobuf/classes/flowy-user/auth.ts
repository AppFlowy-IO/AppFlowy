/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SignInPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
        password?: string;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        email?: string;
        password?: string;
        name?: string;
    }): SignInPayloadPB {
        const message = new SignInPayloadPB({});
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
            password?: string;
            name?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInPayloadPB {
        return SignInPayloadPB.deserialize(bytes);
    }
}
export class SignInParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
        password?: string;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        email?: string;
        password?: string;
        name?: string;
    }): SignInParams {
        const message = new SignInParams({});
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
            password?: string;
            name?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInParams {
        return SignInParams.deserialize(bytes);
    }
}
export class SignInResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        name?: string;
        email?: string;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        user_id?: string;
        name?: string;
        email?: string;
        token?: string;
    }): SignInResponse {
        const message = new SignInResponse({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            name?: string;
            email?: string;
            token?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.token.length)
            writer.writeString(4, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInResponse {
        return SignInResponse.deserialize(bytes);
    }
}
export class SignUpPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
        name?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        email?: string;
        name?: string;
        password?: string;
    }): SignUpPayloadPB {
        const message = new SignUpPayloadPB({});
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
            name?: string;
            password?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpPayloadPB {
        return SignUpPayloadPB.deserialize(bytes);
    }
}
export class SignUpParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
        name?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        email?: string;
        name?: string;
        password?: string;
    }): SignUpParams {
        const message = new SignUpParams({});
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
            name?: string;
            password?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpParams {
        return SignUpParams.deserialize(bytes);
    }
}
export class SignUpResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        name?: string;
        email?: string;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        user_id?: string;
        name?: string;
        email?: string;
        token?: string;
    }): SignUpResponse {
        const message = new SignUpResponse({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            name?: string;
            email?: string;
            token?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.token.length)
            writer.writeString(4, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpResponse {
        return SignUpResponse.deserialize(bytes);
    }
}
