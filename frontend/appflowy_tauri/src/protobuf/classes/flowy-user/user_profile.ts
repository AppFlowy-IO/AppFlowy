/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: user_profile.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class UserTokenPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): UserTokenPB {
        const message = new UserTokenPB({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserTokenPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserTokenPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserTokenPB {
        return UserTokenPB.deserialize(bytes);
    }
}
export class UserSettingPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_folder?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_folder" in data && data.user_folder != undefined) {
                this.user_folder = data.user_folder;
            }
        }
    }
    get user_folder() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_folder(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_folder?: string;
    }): UserSettingPB {
        const message = new UserSettingPB({});
        if (data.user_folder != null) {
            message.user_folder = data.user_folder;
        }
        return message;
    }
    toObject() {
        const data: {
            user_folder?: string;
        } = {};
        if (this.user_folder != null) {
            data.user_folder = this.user_folder;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_folder.length)
            writer.writeString(1, this.user_folder);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSettingPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSettingPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_folder = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserSettingPB {
        return UserSettingPB.deserialize(bytes);
    }
}
export class UserProfilePB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        email?: string;
        name?: string;
        token?: string;
        icon_url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("icon_url" in data && data.icon_url != undefined) {
                this.icon_url = data.icon_url;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get icon_url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set icon_url(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        email?: string;
        name?: string;
        token?: string;
        icon_url?: string;
    }): UserProfilePB {
        const message = new UserProfilePB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.icon_url != null) {
            message.icon_url = data.icon_url;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            email?: string;
            name?: string;
            token?: string;
            icon_url?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.icon_url != null) {
            data.icon_url = this.icon_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.email.length)
            writer.writeString(2, this.email);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.token.length)
            writer.writeString(4, this.token);
        if (this.icon_url.length)
            writer.writeString(5, this.icon_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserProfilePB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserProfilePB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.token = reader.readString();
                    break;
                case 5:
                    message.icon_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserProfilePB {
        return UserProfilePB.deserialize(bytes);
    }
}
export class UpdateUserProfilePayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5]];
    constructor(data?: any[] | ({
        id?: string;
    } & (({
        name?: string;
    }) | ({
        email?: string;
    }) | ({
        password?: string;
    }) | ({
        icon_url?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("icon_url" in data && data.icon_url != undefined) {
                this.icon_url = data.icon_url;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_email() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_password() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get icon_url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set icon_url(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
    }
    get has_icon_url() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_email() {
        const cases: {
            [index: number]: "none" | "email";
        } = {
            0: "none",
            3: "email"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_password() {
        const cases: {
            [index: number]: "none" | "password";
        } = {
            0: "none",
            4: "password"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_icon_url() {
        const cases: {
            [index: number]: "none" | "icon_url";
        } = {
            0: "none",
            5: "icon_url"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        email?: string;
        password?: string;
        icon_url?: string;
    }): UpdateUserProfilePayloadPB {
        const message = new UpdateUserProfilePayloadPB({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.icon_url != null) {
            message.icon_url = data.icon_url;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            email?: string;
            password?: string;
            icon_url?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.icon_url != null) {
            data.icon_url = this.icon_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_email)
            writer.writeString(3, this.email);
        if (this.has_password)
            writer.writeString(4, this.password);
        if (this.has_icon_url)
            writer.writeString(5, this.icon_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfilePayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfilePayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.password = reader.readString();
                    break;
                case 5:
                    message.icon_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateUserProfilePayloadPB {
        return UpdateUserProfilePayloadPB.deserialize(bytes);
    }
}
export class UpdateUserProfileParams extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5]];
    constructor(data?: any[] | ({
        id?: string;
    } & (({
        name?: string;
    }) | ({
        email?: string;
    }) | ({
        password?: string;
    }) | ({
        icon_url?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("icon_url" in data && data.icon_url != undefined) {
                this.icon_url = data.icon_url;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_email() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_password() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get icon_url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set icon_url(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
    }
    get has_icon_url() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get one_of_name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get one_of_email() {
        const cases: {
            [index: number]: "none" | "email";
        } = {
            0: "none",
            3: "email"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get one_of_password() {
        const cases: {
            [index: number]: "none" | "password";
        } = {
            0: "none",
            4: "password"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get one_of_icon_url() {
        const cases: {
            [index: number]: "none" | "icon_url";
        } = {
            0: "none",
            5: "icon_url"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        email?: string;
        password?: string;
        icon_url?: string;
    }): UpdateUserProfileParams {
        const message = new UpdateUserProfileParams({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.icon_url != null) {
            message.icon_url = data.icon_url;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            email?: string;
            password?: string;
            icon_url?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.icon_url != null) {
            data.icon_url = this.icon_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_email)
            writer.writeString(3, this.email);
        if (this.has_password)
            writer.writeString(4, this.password);
        if (this.has_icon_url)
            writer.writeString(5, this.icon_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.password = reader.readString();
                    break;
                case 5:
                    message.icon_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateUserProfileParams {
        return UpdateUserProfileParams.deserialize(bytes);
    }
}
