/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: user_setting.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ThemeModePB {
    Light = 0,
    Dark = 1,
    System = 2
}
export class UserPreferencesPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        appearance_setting?: AppearanceSettingsPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("appearance_setting" in data && data.appearance_setting != undefined) {
                this.appearance_setting = data.appearance_setting;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get appearance_setting() {
        return pb_1.Message.getWrapperField(this, AppearanceSettingsPB, 2) as AppearanceSettingsPB;
    }
    set appearance_setting(value: AppearanceSettingsPB) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_appearance_setting() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        user_id?: string;
        appearance_setting?: ReturnType<typeof AppearanceSettingsPB.prototype.toObject>;
    }): UserPreferencesPB {
        const message = new UserPreferencesPB({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.appearance_setting != null) {
            message.appearance_setting = AppearanceSettingsPB.fromObject(data.appearance_setting);
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            appearance_setting?: ReturnType<typeof AppearanceSettingsPB.prototype.toObject>;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.appearance_setting != null) {
            data.appearance_setting = this.appearance_setting.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.has_appearance_setting)
            writer.writeMessage(2, this.appearance_setting, () => this.appearance_setting.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserPreferencesPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserPreferencesPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.appearance_setting, () => message.appearance_setting = AppearanceSettingsPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserPreferencesPB {
        return UserPreferencesPB.deserialize(bytes);
    }
}
export class AppearanceSettingsPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        theme?: string;
        theme_mode?: ThemeModePB;
        font?: string;
        monospace_font?: string;
        locale?: LocaleSettingsPB;
        reset_to_default?: boolean;
        setting_key_value?: Map<string, string>;
        is_menu_collapsed?: boolean;
        menu_offset?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("theme" in data && data.theme != undefined) {
                this.theme = data.theme;
            }
            if ("theme_mode" in data && data.theme_mode != undefined) {
                this.theme_mode = data.theme_mode;
            }
            if ("font" in data && data.font != undefined) {
                this.font = data.font;
            }
            if ("monospace_font" in data && data.monospace_font != undefined) {
                this.monospace_font = data.monospace_font;
            }
            if ("locale" in data && data.locale != undefined) {
                this.locale = data.locale;
            }
            if ("reset_to_default" in data && data.reset_to_default != undefined) {
                this.reset_to_default = data.reset_to_default;
            }
            if ("setting_key_value" in data && data.setting_key_value != undefined) {
                this.setting_key_value = data.setting_key_value;
            }
            if ("is_menu_collapsed" in data && data.is_menu_collapsed != undefined) {
                this.is_menu_collapsed = data.is_menu_collapsed;
            }
            if ("menu_offset" in data && data.menu_offset != undefined) {
                this.menu_offset = data.menu_offset;
            }
        }
        if (!this.setting_key_value)
            this.setting_key_value = new Map();
    }
    get theme() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set theme(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get theme_mode() {
        return pb_1.Message.getFieldWithDefault(this, 2, ThemeModePB.Light) as ThemeModePB;
    }
    set theme_mode(value: ThemeModePB) {
        pb_1.Message.setField(this, 2, value);
    }
    get font() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set font(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get monospace_font() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set monospace_font(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get locale() {
        return pb_1.Message.getWrapperField(this, LocaleSettingsPB, 5) as LocaleSettingsPB;
    }
    set locale(value: LocaleSettingsPB) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_locale() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get reset_to_default() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set reset_to_default(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get setting_key_value() {
        return pb_1.Message.getField(this, 7) as any as Map<string, string>;
    }
    set setting_key_value(value: Map<string, string>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    get is_menu_collapsed() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set is_menu_collapsed(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get menu_offset() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set menu_offset(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        theme?: string;
        theme_mode?: ThemeModePB;
        font?: string;
        monospace_font?: string;
        locale?: ReturnType<typeof LocaleSettingsPB.prototype.toObject>;
        reset_to_default?: boolean;
        setting_key_value?: {
            [key: string]: string;
        };
        is_menu_collapsed?: boolean;
        menu_offset?: number;
    }): AppearanceSettingsPB {
        const message = new AppearanceSettingsPB({});
        if (data.theme != null) {
            message.theme = data.theme;
        }
        if (data.theme_mode != null) {
            message.theme_mode = data.theme_mode;
        }
        if (data.font != null) {
            message.font = data.font;
        }
        if (data.monospace_font != null) {
            message.monospace_font = data.monospace_font;
        }
        if (data.locale != null) {
            message.locale = LocaleSettingsPB.fromObject(data.locale);
        }
        if (data.reset_to_default != null) {
            message.reset_to_default = data.reset_to_default;
        }
        if (typeof data.setting_key_value == "object") {
            message.setting_key_value = new Map(Object.entries(data.setting_key_value));
        }
        if (data.is_menu_collapsed != null) {
            message.is_menu_collapsed = data.is_menu_collapsed;
        }
        if (data.menu_offset != null) {
            message.menu_offset = data.menu_offset;
        }
        return message;
    }
    toObject() {
        const data: {
            theme?: string;
            theme_mode?: ThemeModePB;
            font?: string;
            monospace_font?: string;
            locale?: ReturnType<typeof LocaleSettingsPB.prototype.toObject>;
            reset_to_default?: boolean;
            setting_key_value?: {
                [key: string]: string;
            };
            is_menu_collapsed?: boolean;
            menu_offset?: number;
        } = {};
        if (this.theme != null) {
            data.theme = this.theme;
        }
        if (this.theme_mode != null) {
            data.theme_mode = this.theme_mode;
        }
        if (this.font != null) {
            data.font = this.font;
        }
        if (this.monospace_font != null) {
            data.monospace_font = this.monospace_font;
        }
        if (this.locale != null) {
            data.locale = this.locale.toObject();
        }
        if (this.reset_to_default != null) {
            data.reset_to_default = this.reset_to_default;
        }
        if (this.setting_key_value.size > 0) {
            data.setting_key_value = (Object.fromEntries)(this.setting_key_value);
        }
        if (this.is_menu_collapsed != null) {
            data.is_menu_collapsed = this.is_menu_collapsed;
        }
        if (this.menu_offset != null) {
            data.menu_offset = this.menu_offset;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.theme.length)
            writer.writeString(1, this.theme);
        if (this.theme_mode != ThemeModePB.Light)
            writer.writeEnum(2, this.theme_mode);
        if (this.font.length)
            writer.writeString(3, this.font);
        if (this.monospace_font.length)
            writer.writeString(4, this.monospace_font);
        if (this.has_locale)
            writer.writeMessage(5, this.locale, () => this.locale.serialize(writer));
        if (this.reset_to_default != false)
            writer.writeBool(6, this.reset_to_default);
        for (const [key, value] of this.setting_key_value) {
            writer.writeMessage(7, this.setting_key_value, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (this.is_menu_collapsed != false)
            writer.writeBool(8, this.is_menu_collapsed);
        if (this.menu_offset != 0)
            writer.writeDouble(9, this.menu_offset);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppearanceSettingsPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppearanceSettingsPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.theme = reader.readString();
                    break;
                case 2:
                    message.theme_mode = reader.readEnum();
                    break;
                case 3:
                    message.font = reader.readString();
                    break;
                case 4:
                    message.monospace_font = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.locale, () => message.locale = LocaleSettingsPB.deserialize(reader));
                    break;
                case 6:
                    message.reset_to_default = reader.readBool();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.setting_key_value as any, reader, reader.readString, reader.readString));
                    break;
                case 8:
                    message.is_menu_collapsed = reader.readBool();
                    break;
                case 9:
                    message.menu_offset = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AppearanceSettingsPB {
        return AppearanceSettingsPB.deserialize(bytes);
    }
}
export class LocaleSettingsPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        language_code?: string;
        country_code?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("language_code" in data && data.language_code != undefined) {
                this.language_code = data.language_code;
            }
            if ("country_code" in data && data.country_code != undefined) {
                this.country_code = data.country_code;
            }
        }
    }
    get language_code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set language_code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get country_code() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set country_code(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        language_code?: string;
        country_code?: string;
    }): LocaleSettingsPB {
        const message = new LocaleSettingsPB({});
        if (data.language_code != null) {
            message.language_code = data.language_code;
        }
        if (data.country_code != null) {
            message.country_code = data.country_code;
        }
        return message;
    }
    toObject() {
        const data: {
            language_code?: string;
            country_code?: string;
        } = {};
        if (this.language_code != null) {
            data.language_code = this.language_code;
        }
        if (this.country_code != null) {
            data.country_code = this.country_code;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.language_code.length)
            writer.writeString(1, this.language_code);
        if (this.country_code.length)
            writer.writeString(2, this.country_code);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocaleSettingsPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocaleSettingsPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.language_code = reader.readString();
                    break;
                case 2:
                    message.country_code = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LocaleSettingsPB {
        return LocaleSettingsPB.deserialize(bytes);
    }
}
