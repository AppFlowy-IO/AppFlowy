// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OauthSignInPB {
    // message fields
    pub map: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub authenticator: AuthenticatorPB,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OauthSignInPB {
    fn default() -> &'a OauthSignInPB {
        <OauthSignInPB as ::protobuf::Message>::default_instance()
    }
}

impl OauthSignInPB {
    pub fn new() -> OauthSignInPB {
        ::std::default::Default::default()
    }

    // repeated .OauthSignInPB.MapEntry map = 1;


    pub fn get_map(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.map
    }
    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.map = v;
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.map
    }

    // Take field
    pub fn take_map(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.map, ::std::collections::HashMap::new())
    }

    // .AuthenticatorPB authenticator = 2;


    pub fn get_authenticator(&self) -> AuthenticatorPB {
        self.authenticator
    }
    pub fn clear_authenticator(&mut self) {
        self.authenticator = AuthenticatorPB::Local;
    }

    // Param is passed by value, moved
    pub fn set_authenticator(&mut self, v: AuthenticatorPB) {
        self.authenticator = v;
    }
}

impl ::protobuf::Message for OauthSignInPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.map)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.authenticator, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.map);
        if self.authenticator != AuthenticatorPB::Local {
            my_size += ::protobuf::rt::enum_size(2, self.authenticator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.map, os)?;
        if self.authenticator != AuthenticatorPB::Local {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.authenticator))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OauthSignInPB {
        OauthSignInPB::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "map",
                |m: &OauthSignInPB| { &m.map },
                |m: &mut OauthSignInPB| { &mut m.map },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AuthenticatorPB>>(
                "authenticator",
                |m: &OauthSignInPB| { &m.authenticator },
                |m: &mut OauthSignInPB| { &mut m.authenticator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OauthSignInPB>(
                "OauthSignInPB",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OauthSignInPB {
        static instance: ::protobuf::rt::LazyV2<OauthSignInPB> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OauthSignInPB::new)
    }
}

impl ::protobuf::Clear for OauthSignInPB {
    fn clear(&mut self) {
        self.map.clear();
        self.authenticator = AuthenticatorPB::Local;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OauthSignInPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OauthSignInPB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AuthenticatorPB {
    Local = 0,
    Supabase = 1,
    AppFlowyCloud = 2,
}

impl ::protobuf::ProtobufEnum for AuthenticatorPB {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthenticatorPB> {
        match value {
            0 => ::std::option::Option::Some(AuthenticatorPB::Local),
            1 => ::std::option::Option::Some(AuthenticatorPB::Supabase),
            2 => ::std::option::Option::Some(AuthenticatorPB::AppFlowyCloud),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AuthenticatorPB] = &[
            AuthenticatorPB::Local,
            AuthenticatorPB::Supabase,
            AuthenticatorPB::AppFlowyCloud,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AuthenticatorPB>("AuthenticatorPB", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AuthenticatorPB {
}

impl ::std::default::Default for AuthenticatorPB {
    fn default() -> Self {
        AuthenticatorPB::Local
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticatorPB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nauth.proto\"\xaa\x01\n\rOauthSignInPB\x12)\n\x03map\x18\x01\x20\x03(\
    \x0b2\x17.OauthSignInPB.MapEntryR\x03map\x126\n\rauthenticator\x18\x02\
    \x20\x01(\x0e2\x10.AuthenticatorPBR\rauthenticator\x1a6\n\x08MapEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01*=\n\x0fAuthenticatorPB\x12\t\n\x05Local\
    \x10\0\x12\x0c\n\x08Supabase\x10\x01\x12\x11\n\rAppFlowyCloud\x10\x02b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
