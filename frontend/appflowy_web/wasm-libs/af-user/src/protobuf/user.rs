// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `user.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct UserProfilePB {
    // message fields
    pub id: i64,
    pub email: ::std::string::String,
    pub name: ::std::string::String,
    pub token: ::std::string::String,
    pub icon_url: ::std::string::String,
    pub openai_key: ::std::string::String,
    pub authenticator: super::auth::AuthenticatorPB,
    pub encryption_sign: ::std::string::String,
    pub workspace_id: ::std::string::String,
    pub stability_ai_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserProfilePB {
    fn default() -> &'a UserProfilePB {
        <UserProfilePB as ::protobuf::Message>::default_instance()
    }
}

impl UserProfilePB {
    pub fn new() -> UserProfilePB {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string email = 2;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string token = 4;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string icon_url = 5;


    pub fn get_icon_url(&self) -> &str {
        &self.icon_url
    }
    pub fn clear_icon_url(&mut self) {
        self.icon_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_icon_url(&mut self, v: ::std::string::String) {
        self.icon_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_url(&mut self) -> &mut ::std::string::String {
        &mut self.icon_url
    }

    // Take field
    pub fn take_icon_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.icon_url, ::std::string::String::new())
    }

    // string openai_key = 6;


    pub fn get_openai_key(&self) -> &str {
        &self.openai_key
    }
    pub fn clear_openai_key(&mut self) {
        self.openai_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_openai_key(&mut self, v: ::std::string::String) {
        self.openai_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_openai_key(&mut self) -> &mut ::std::string::String {
        &mut self.openai_key
    }

    // Take field
    pub fn take_openai_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.openai_key, ::std::string::String::new())
    }

    // .AuthenticatorPB authenticator = 7;


    pub fn get_authenticator(&self) -> super::auth::AuthenticatorPB {
        self.authenticator
    }
    pub fn clear_authenticator(&mut self) {
        self.authenticator = super::auth::AuthenticatorPB::Local;
    }

    // Param is passed by value, moved
    pub fn set_authenticator(&mut self, v: super::auth::AuthenticatorPB) {
        self.authenticator = v;
    }

    // string encryption_sign = 8;


    pub fn get_encryption_sign(&self) -> &str {
        &self.encryption_sign
    }
    pub fn clear_encryption_sign(&mut self) {
        self.encryption_sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_encryption_sign(&mut self, v: ::std::string::String) {
        self.encryption_sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_sign(&mut self) -> &mut ::std::string::String {
        &mut self.encryption_sign
    }

    // Take field
    pub fn take_encryption_sign(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.encryption_sign, ::std::string::String::new())
    }

    // string workspace_id = 9;


    pub fn get_workspace_id(&self) -> &str {
        &self.workspace_id
    }
    pub fn clear_workspace_id(&mut self) {
        self.workspace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_workspace_id(&mut self, v: ::std::string::String) {
        self.workspace_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_workspace_id(&mut self) -> &mut ::std::string::String {
        &mut self.workspace_id
    }

    // Take field
    pub fn take_workspace_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.workspace_id, ::std::string::String::new())
    }

    // string stability_ai_key = 10;


    pub fn get_stability_ai_key(&self) -> &str {
        &self.stability_ai_key
    }
    pub fn clear_stability_ai_key(&mut self) {
        self.stability_ai_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_stability_ai_key(&mut self, v: ::std::string::String) {
        self.stability_ai_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stability_ai_key(&mut self) -> &mut ::std::string::String {
        &mut self.stability_ai_key
    }

    // Take field
    pub fn take_stability_ai_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stability_ai_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UserProfilePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.icon_url)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.openai_key)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.authenticator, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.encryption_sign)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.workspace_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stability_ai_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token);
        }
        if !self.icon_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.icon_url);
        }
        if !self.openai_key.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.openai_key);
        }
        if self.authenticator != super::auth::AuthenticatorPB::Local {
            my_size += ::protobuf::rt::enum_size(7, self.authenticator);
        }
        if !self.encryption_sign.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.encryption_sign);
        }
        if !self.workspace_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.workspace_id);
        }
        if !self.stability_ai_key.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.stability_ai_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.token.is_empty() {
            os.write_string(4, &self.token)?;
        }
        if !self.icon_url.is_empty() {
            os.write_string(5, &self.icon_url)?;
        }
        if !self.openai_key.is_empty() {
            os.write_string(6, &self.openai_key)?;
        }
        if self.authenticator != super::auth::AuthenticatorPB::Local {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.authenticator))?;
        }
        if !self.encryption_sign.is_empty() {
            os.write_string(8, &self.encryption_sign)?;
        }
        if !self.workspace_id.is_empty() {
            os.write_string(9, &self.workspace_id)?;
        }
        if !self.stability_ai_key.is_empty() {
            os.write_string(10, &self.stability_ai_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserProfilePB {
        UserProfilePB::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "id",
                |m: &UserProfilePB| { &m.id },
                |m: &mut UserProfilePB| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &UserProfilePB| { &m.email },
                |m: &mut UserProfilePB| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &UserProfilePB| { &m.name },
                |m: &mut UserProfilePB| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &UserProfilePB| { &m.token },
                |m: &mut UserProfilePB| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "icon_url",
                |m: &UserProfilePB| { &m.icon_url },
                |m: &mut UserProfilePB| { &mut m.icon_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "openai_key",
                |m: &UserProfilePB| { &m.openai_key },
                |m: &mut UserProfilePB| { &mut m.openai_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::auth::AuthenticatorPB>>(
                "authenticator",
                |m: &UserProfilePB| { &m.authenticator },
                |m: &mut UserProfilePB| { &mut m.authenticator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encryption_sign",
                |m: &UserProfilePB| { &m.encryption_sign },
                |m: &mut UserProfilePB| { &mut m.encryption_sign },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "workspace_id",
                |m: &UserProfilePB| { &m.workspace_id },
                |m: &mut UserProfilePB| { &mut m.workspace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stability_ai_key",
                |m: &UserProfilePB| { &m.stability_ai_key },
                |m: &mut UserProfilePB| { &mut m.stability_ai_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserProfilePB>(
                "UserProfilePB",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserProfilePB {
        static instance: ::protobuf::rt::LazyV2<UserProfilePB> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserProfilePB::new)
    }
}

impl ::protobuf::Clear for UserProfilePB {
    fn clear(&mut self) {
        self.id = 0;
        self.email.clear();
        self.name.clear();
        self.token.clear();
        self.icon_url.clear();
        self.openai_key.clear();
        self.authenticator = super::auth::AuthenticatorPB::Local;
        self.encryption_sign.clear();
        self.workspace_id.clear();
        self.stability_ai_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserProfilePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserProfilePB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EncryptionTypePB {
    NoEncryption = 0,
    Symmetric = 1,
}

impl ::protobuf::ProtobufEnum for EncryptionTypePB {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EncryptionTypePB> {
        match value {
            0 => ::std::option::Option::Some(EncryptionTypePB::NoEncryption),
            1 => ::std::option::Option::Some(EncryptionTypePB::Symmetric),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EncryptionTypePB] = &[
            EncryptionTypePB::NoEncryption,
            EncryptionTypePB::Symmetric,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EncryptionTypePB>("EncryptionTypePB", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EncryptionTypePB {
}

impl ::std::default::Default for EncryptionTypePB {
    fn default() -> Self {
        EncryptionTypePB::NoEncryption
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionTypePB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nuser.proto\x1a\nauth.proto\"\xc7\x02\n\rUserProfilePB\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\x03R\x02id\x12\x14\n\x05email\x18\x02\x20\x01(\tR\x05\
    email\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x14\n\x05token\
    \x18\x04\x20\x01(\tR\x05token\x12\x19\n\x08icon_url\x18\x05\x20\x01(\tR\
    \x07iconUrl\x12\x1d\n\nopenai_key\x18\x06\x20\x01(\tR\topenaiKey\x126\n\
    \rauthenticator\x18\x07\x20\x01(\x0e2\x10.AuthenticatorPBR\rauthenticato\
    r\x12'\n\x0fencryption_sign\x18\x08\x20\x01(\tR\x0eencryptionSign\x12!\n\
    \x0cworkspace_id\x18\t\x20\x01(\tR\x0bworkspaceId\x12(\n\x10stability_ai\
    _key\x18\n\x20\x01(\tR\x0estabilityAiKey*3\n\x10EncryptionTypePB\x12\x10\
    \n\x0cNoEncryption\x10\0\x12\r\n\tSymmetric\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
