/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: errors.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./code";
import * as pb_1 from "google-protobuf";
export class FlowyError extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: dependency_1.ErrorCode;
        msg?: string;
        payload?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.ErrorCode.Internal) as dependency_1.ErrorCode;
    }
    set code(value: dependency_1.ErrorCode) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get payload() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set payload(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        code?: dependency_1.ErrorCode;
        msg?: string;
        payload?: Uint8Array;
    }): FlowyError {
        const message = new FlowyError({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.payload != null) {
            message.payload = data.payload;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: dependency_1.ErrorCode;
            msg?: string;
            payload?: Uint8Array;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.payload != null) {
            data.payload = this.payload;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != dependency_1.ErrorCode.Internal)
            writer.writeEnum(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (this.payload.length)
            writer.writeBytes(3, this.payload);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlowyError {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlowyError();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readEnum();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                case 3:
                    message.payload = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FlowyError {
        return FlowyError.deserialize(bytes);
    }
}
