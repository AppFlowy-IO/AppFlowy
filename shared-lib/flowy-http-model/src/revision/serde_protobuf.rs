// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `revision.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct RevisionPB {
    // message fields
    pub base_rev_id: i64,
    pub rev_id: i64,
    pub bytes: ::std::vec::Vec<u8>,
    pub md5: ::std::string::String,
    pub object_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevisionPB {
    fn default() -> &'a RevisionPB {
        <RevisionPB as ::protobuf::Message>::default_instance()
    }
}

impl RevisionPB {
    pub fn new() -> RevisionPB {
        ::std::default::Default::default()
    }

    // int64 base_rev_id = 1;


    pub fn get_base_rev_id(&self) -> i64 {
        self.base_rev_id
    }
    pub fn clear_base_rev_id(&mut self) {
        self.base_rev_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_base_rev_id(&mut self, v: i64) {
        self.base_rev_id = v;
    }

    // int64 rev_id = 2;


    pub fn get_rev_id(&self) -> i64 {
        self.rev_id
    }
    pub fn clear_rev_id(&mut self) {
        self.rev_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_rev_id(&mut self, v: i64) {
        self.rev_id = v;
    }

    // bytes bytes = 3;


    pub fn get_bytes(&self) -> &[u8] {
        &self.bytes
    }
    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes, ::std::vec::Vec::new())
    }

    // string md5 = 4;


    pub fn get_md5(&self) -> &str {
        &self.md5
    }
    pub fn clear_md5(&mut self) {
        self.md5.clear();
    }

    // Param is passed by value, moved
    pub fn set_md5(&mut self, v: ::std::string::String) {
        self.md5 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_md5(&mut self) -> &mut ::std::string::String {
        &mut self.md5
    }

    // Take field
    pub fn take_md5(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.md5, ::std::string::String::new())
    }

    // string object_id = 5;


    pub fn get_object_id(&self) -> &str {
        &self.object_id
    }
    pub fn clear_object_id(&mut self) {
        self.object_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_id(&mut self, v: ::std::string::String) {
        self.object_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_id(&mut self) -> &mut ::std::string::String {
        &mut self.object_id
    }

    // Take field
    pub fn take_object_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RevisionPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.base_rev_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rev_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.md5)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.base_rev_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.base_rev_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rev_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rev_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.bytes);
        }
        if !self.md5.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.md5);
        }
        if !self.object_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.object_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.base_rev_id != 0 {
            os.write_int64(1, self.base_rev_id)?;
        }
        if self.rev_id != 0 {
            os.write_int64(2, self.rev_id)?;
        }
        if !self.bytes.is_empty() {
            os.write_bytes(3, &self.bytes)?;
        }
        if !self.md5.is_empty() {
            os.write_string(4, &self.md5)?;
        }
        if !self.object_id.is_empty() {
            os.write_string(5, &self.object_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevisionPB {
        RevisionPB::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "base_rev_id",
                |m: &RevisionPB| { &m.base_rev_id },
                |m: &mut RevisionPB| { &mut m.base_rev_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rev_id",
                |m: &RevisionPB| { &m.rev_id },
                |m: &mut RevisionPB| { &mut m.rev_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bytes",
                |m: &RevisionPB| { &m.bytes },
                |m: &mut RevisionPB| { &mut m.bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "md5",
                |m: &RevisionPB| { &m.md5 },
                |m: &mut RevisionPB| { &mut m.md5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "object_id",
                |m: &RevisionPB| { &m.object_id },
                |m: &mut RevisionPB| { &mut m.object_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevisionPB>(
                "RevisionPB",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevisionPB {
        static instance: ::protobuf::rt::LazyV2<RevisionPB> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevisionPB::new)
    }
}

impl ::protobuf::Clear for RevisionPB {
    fn clear(&mut self) {
        self.base_rev_id = 0;
        self.rev_id = 0;
        self.bytes.clear();
        self.md5.clear();
        self.object_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevisionPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevisionPB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0erevision.proto\"\x86\x01\n\x08RevisionPB\x12\x1e\n\x0bbase_rev_id\
    \x18\x01\x20\x01(\x03R\tbaseRevId\x12\x15\n\x06rev_id\x18\x02\x20\x01(\
    \x03R\x05revId\x12\x14\n\x05bytes\x18\x03\x20\x01(\x0cR\x05bytes\x12\x10\
    \n\x03md5\x18\x04\x20\x01(\tR\x03md5\x12\x1b\n\tobject_id\x18\x05\x20\
    \x01(\tR\x08objectIdb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
