// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `errors.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    EmailIsEmpty = 0,
    EmailFormatInvalid = 1,
    EmailAlreadyExists = 2,
    PasswordIsEmpty = 10,
    PasswordTooLong = 11,
    PasswordContainsForbidCharacters = 12,
    PasswordFormatInvalid = 13,
    PasswordNotMatch = 14,
    UserNameTooLong = 20,
    UserNameContainForbiddenCharacters = 21,
    UserNameIsEmpty = 22,
    UserIdInvalid = 23,
    UserUnauthorized = 24,
    UserNotExist = 25,
    ServerError = 99,
    InternalError = 100,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::EmailIsEmpty),
            1 => ::std::option::Option::Some(ErrorCode::EmailFormatInvalid),
            2 => ::std::option::Option::Some(ErrorCode::EmailAlreadyExists),
            10 => ::std::option::Option::Some(ErrorCode::PasswordIsEmpty),
            11 => ::std::option::Option::Some(ErrorCode::PasswordTooLong),
            12 => ::std::option::Option::Some(ErrorCode::PasswordContainsForbidCharacters),
            13 => ::std::option::Option::Some(ErrorCode::PasswordFormatInvalid),
            14 => ::std::option::Option::Some(ErrorCode::PasswordNotMatch),
            20 => ::std::option::Option::Some(ErrorCode::UserNameTooLong),
            21 => ::std::option::Option::Some(ErrorCode::UserNameContainForbiddenCharacters),
            22 => ::std::option::Option::Some(ErrorCode::UserNameIsEmpty),
            23 => ::std::option::Option::Some(ErrorCode::UserIdInvalid),
            24 => ::std::option::Option::Some(ErrorCode::UserUnauthorized),
            25 => ::std::option::Option::Some(ErrorCode::UserNotExist),
            99 => ::std::option::Option::Some(ErrorCode::ServerError),
            100 => ::std::option::Option::Some(ErrorCode::InternalError),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::EmailIsEmpty,
            ErrorCode::EmailFormatInvalid,
            ErrorCode::EmailAlreadyExists,
            ErrorCode::PasswordIsEmpty,
            ErrorCode::PasswordTooLong,
            ErrorCode::PasswordContainsForbidCharacters,
            ErrorCode::PasswordFormatInvalid,
            ErrorCode::PasswordNotMatch,
            ErrorCode::UserNameTooLong,
            ErrorCode::UserNameContainForbiddenCharacters,
            ErrorCode::UserNameIsEmpty,
            ErrorCode::UserIdInvalid,
            ErrorCode::UserUnauthorized,
            ErrorCode::UserNotExist,
            ErrorCode::ServerError,
            ErrorCode::InternalError,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorCode>("ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::EmailIsEmpty
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cerrors.proto*\xff\x02\n\tErrorCode\x12\x10\n\x0cEmailIsEmpty\x10\0\
    \x12\x16\n\x12EmailFormatInvalid\x10\x01\x12\x16\n\x12EmailAlreadyExists\
    \x10\x02\x12\x13\n\x0fPasswordIsEmpty\x10\n\x12\x13\n\x0fPasswordTooLong\
    \x10\x0b\x12$\n\x20PasswordContainsForbidCharacters\x10\x0c\x12\x19\n\
    \x15PasswordFormatInvalid\x10\r\x12\x14\n\x10PasswordNotMatch\x10\x0e\
    \x12\x13\n\x0fUserNameTooLong\x10\x14\x12&\n\"UserNameContainForbiddenCh\
    aracters\x10\x15\x12\x13\n\x0fUserNameIsEmpty\x10\x16\x12\x11\n\rUserIdI\
    nvalid\x10\x17\x12\x14\n\x10UserUnauthorized\x10\x18\x12\x10\n\x0cUserNo\
    tExist\x10\x19\x12\x0f\n\x0bServerError\x10c\x12\x11\n\rInternalError\
    \x10db\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
